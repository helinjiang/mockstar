{"version":3,"sources":["middlewares/api.js","custom.js","pages/mockers/data/data-mocker/action.js","pages/mockers/data/data-mocker/reducer.js","pages/mockers/data/data-mocker/index.js","pages/mockers/data/data-mocker-list/action.js","pages/mockers/data/data-mocker-list/reducer.js","pages/mockers/data/data-mocker-list/index.js","datas/data-detail/action.js","datas/data-detail/reducer.js","datas/data-detail/index.js","reducers/index.js","store/index.js","components/layout-header/index.js","pages/home/components/proxy-info/index.js","pages/home/index.js","pages/mockers/components/list/list-item/index.js","pages/mockers/components/list/index.js","business/db/index.js","pages/mockers/components/mocker/display-breadcrumb/index.js","pages/mockers/components/mocker/display-detail/index.js","pages/mockers/components/mocker/display-show-result/index.js","pages/mockers/components/mocker/display-action/index.js","pages/mockers/components/mocker/display-proxy-tips/index.js","pages/mockers/components/mocker/display-mock-module-list/index.js","pages/mockers/components/mocker/display-readme/index.js","pages/mockers/components/mocker/display-menu/index.js","pages/mockers/components/mocker/index.js","pages/mockers/index.js","pages/debug/components/create-mocker/create-mocker-form/index.js","pages/debug/components/create-mocker/index.js","pages/debug/index.js","App.js","index.js"],"names":["STATUS","store","next","action","opts","type","types","requestType","successType","failureType","actionWith","_action","Object","assign","obj","data","finalAction","requestURL","url","request","send","then","res","body","resData","_onSuccess","catch","err","stack","errno","error","_onFail","Promise","reject","setTimeout","getLocalServerConfig","config","_","merge","namespace","adminSiteRouteName","adminCGIRouteName","window","_mockstar_config_","getSiteRoot","getSiteBase","getCGIBase","loadMocker","mockerName","dispatch","getState","fetchMocker","loadMockerReadme","fetchMockerReadme","requestUpdateMocker","newMockerState","setMockerActiveModule","mockModuleName","activeModule","setMockerDisable","value","disable","initialState","isLoaded","readme","mockerInfo","state","update","modules","sort","a","b","priority","html","keys","length","loadMockerList","list","mockerListInfo","map","item","name","loadDetail","detailInfo","rootReducer","combineReducers","configureStore","preloadedState","createStore","applyMiddleware","thunk","api","LayoutHeader","props","context","handleIsActive","curMenu","newMenuId","activeMenu","setState","isInit","this","self","top","Header","className","theme","mode","selectedKeys","style","lineHeight","Item","key","NavLink","to","isActive","Component","ProxyInfo","localServerConfig","hostname","location","port","mockStarHost","slice","href","target","connect","Home","MockerListItem","mockerItem","mockersPath","curTag","index","clickTag","setActive","setDisable","mockerItemConfig","isDisabled","title","extra","icon","onClick","bind","plugin","method","message","description","showIcon","Group","tags","tagName","tagIndex","mockModuleList","disabled","MockersList","handleClickTag","handleActive","handleDisable","curIsDisabled","arr","forEach","concat","uniq","filter","indexOf","filterList","groupLength","parseInt","result","i","j","push","match","tagList","getAllTags","getFilterList","getResultToRenderList","subList","subListIndex","gutter","span","getDataByPost","queryOpts","resolve","superagent","post","set","end","getDataByGet","get","query","MockerSwitcher","split","pop","parentPath","join","MockerDetail","version","author","width","route","MockerShowResult","handleOnChange","event","showData","nextProps","JSON","stringify","onHide","onEmitPush","isShow","isShowEmitButton","visible","onCancel","onOk","footer","size","id","minHeight","onChange","previewResult","updateDisable","MockerProxyInfo","mockServerHost","MockerMockModuleList","updateActive","tableColumns","dataIndex","render","text","record","loading","rowKey","columns","dataSource","MockerReadme","htmlContent","dangerouslySetInnerHTML","__html","MockerMenu","handleClick","params","history","path","replace","refresh","defaultSelectedKeys","withRouter","Mocker","handlePreviewResult","actualURL","host","getMockServerHost","fullPath","undefined","ajax","handleModalShow","console","AsyncClient","modalShowData","handleModalHide","handleModalEmitPush","log","emit","handleRefresh","Sider","MockersContainer","Route","component","exact","List","layout","labelCol","wrapperCol","tailLayout","offset","debugJsonData","retcode","CreateMockerForm","formRef","React","createRef","onFinish","values","handleCreateMocker","onFinishFailed","errorInfo","nextContext","mockServerPath","current","setFieldsValue","initialValues","mockerMethod","mockerRoute","debugMockModuleJsonData","ref","label","rules","required","TextArea","autoSize","htmlType","CreateMocker","logs","messageType","queryData","addLog","status","Debug","App","Content","Switch","Redirect","from","Mockers","__initialState","Root","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.885e2d6a.chunk.js","sourcesContent":["import request from 'superagent';\n\nconst STATUS = 'storeStatus';\n\nexport const CALL_API = 'Call API';\n\nexport default store => next => action => {\n  /**\n   * opts 字段说明：\n   *  url: CGI请求地址\n   *  types: action的type值数组，按顺序依次代表: requestType, successType, failureType\n   *  type: ajax的类型，get或者post\n   *  data: 请求的参数对象\n   *\n   * @type {{url:String, types:String[], type:String, data:Object}}\n   */\n  const opts = action[CALL_API];\n\n  if (typeof opts === 'undefined') {\n    return next(action);\n  }\n\n  // 二次处理请求的opts中的参数\n  const {type} = opts,\n    [requestType, successType, failureType] = opts.types;\n\n  opts.type = type ? type : 'GET';\n\n  /**\n   * 触发action\n   * @param {Object} _action\n   * @returns {*}\n   */\n  function actionWith(_action) {\n    _action = Object.assign(action, _action);\n\n    //'wait' 'fetching' 'success' 'fail'\n    let obj = {\n      [STATUS]: 'fetching',\n    };\n\n    switch (_action.type) {\n      case successType:\n        obj[STATUS] = 'success';\n        break;\n      case failureType:\n        obj[STATUS] = 'fail';\n    }\n\n    if (obj[STATUS] !== 'fetching') {\n      _action.data = Object.assign(_action.data || {}, obj);\n    } else {\n      _action.data = {};\n    }\n\n    const finalAction = _action;\n\n    delete finalAction[CALL_API];\n\n    return finalAction;\n  }\n\n  // 在请求发送之前，首先会触发 request 的action，表示要发送请求了\n  let data = Object.assign({}, opts.data);\n\n  next(\n    actionWith({\n      type: requestType,\n      data,\n    }),\n  );\n\n  // 开发模式下需要先写定固定端口号，因为默认启动的时3000端口\n  let requestURL = opts.url;\n  if (process.env.NODE_ENV !== 'production') {\n    requestURL = 'http://127.0.0.1:9527' + requestURL;\n  }\n\n  // 发送 ajax 请求\n  return request(opts.type, requestURL)\n    .send(opts.data)\n    .then(res => {\n      return res.body || {};\n    })\n    .then(resData => {\n      let finalAction = actionWith({\n        type: successType,\n        data: resData,\n      });\n\n      next(finalAction);\n\n      if (typeof opts._onSuccess === 'function') {\n        opts._onSuccess(resData, next);\n      }\n\n      return finalAction;\n    })\n    .catch(err => {\n      // ios8下面 stack会存在\n      if (err && err.stack && !err.errno) {\n        // error\n        setTimeout(function () {\n          throw err;\n        }, 0);\n      } else {\n        let finalAction = actionWith({\n          type: failureType,\n          error: err,\n        });\n\n        next(finalAction);\n\n        if (typeof opts._onFail === 'function') {\n          opts._onFail(err, next);\n        }\n\n        return Promise.reject(finalAction);\n      }\n    });\n};\n","import _ from 'lodash';\n\nexport function getLocalServerConfig() {\n  const config = _.merge(\n    {\n      namespace: '',\n      adminSiteRouteName: 'mockstar-admin',\n      adminCGIRouteName: 'mockstar-cgi',\n    },\n    window._mockstar_config_,\n  );\n\n  window._mockstar_config_ = config;\n\n  return config;\n}\n\nexport function getSiteRoot() {\n  let {namespace} = getLocalServerConfig();\n\n  return namespace ? `/${namespace}/` : '/';\n}\n\nexport function getSiteBase() {\n  let {adminSiteRouteName} = getLocalServerConfig();\n\n  return getSiteRoot() + adminSiteRouteName;\n}\n\nexport function getCGIBase() {\n  let {adminCGIRouteName} = getLocalServerConfig();\n\n  return getSiteRoot() + adminCGIRouteName;\n}\n\nexport function getPort() {\n  let {port} = getLocalServerConfig();\n\n  return port;\n}\n\nexport function getNamespace() {\n  let {namespace} = getLocalServerConfig();\n\n  return namespace;\n}\n","import {CALL_API} from '../../../../middlewares/api';\nimport {getCGIBase} from '../../../../custom';\n\nexport const MOCKER_REQUEST = 'MOCKER_REQUEST';\nexport const MOCKER_REQUEST_SUCCESS = 'MOCKER_REQUEST_SUCCESS';\nexport const MOCKER_REQUEST_FAIL = 'MOCKER_REQUEST_FAIL';\n\nexport const MOCKER_README_REQUEST = 'MOCKER_README_REQUEST';\nexport const MOCKER_README_REQUEST_SUCCESS = 'MOCKER_README_REQUEST_SUCCESS';\nexport const MOCKER_README_REQUEST_FAIL = 'MOCKER_README_REQUEST_FAIL';\n\nexport const SET_ACTIVE_MODULE_REQUEST = 'SET_ACTIVE_MODULE_REQUEST';\nexport const SET_ACTIVE_MODULE_REQUEST_SUCCESS = 'SET_ACTIVE_MODULE_REQUEST_SUCCESS';\nexport const SET_ACTIVE_MODULE_REQUEST_FAIL = 'SET_ACTIVE_MODULE_REQUEST_FAIL';\n\nfunction fetchMocker(mockerName) {\n  return {\n    [CALL_API]: {\n      types: [MOCKER_REQUEST, MOCKER_REQUEST_SUCCESS, MOCKER_REQUEST_FAIL],\n      url: `${getCGIBase()}/mocker/${mockerName}`,\n    },\n  };\n}\n\nexport function loadMocker(mockerName) {\n  return (dispatch, getState) => {\n    return dispatch(fetchMocker(mockerName));\n  };\n}\n\nfunction fetchMockerReadme(mockerName) {\n  return {\n    [CALL_API]: {\n      types: [MOCKER_README_REQUEST, MOCKER_README_REQUEST_SUCCESS, MOCKER_README_REQUEST_FAIL],\n      url: `${getCGIBase()}/mocker/${mockerName}/readme`,\n    },\n  };\n}\n\nexport function loadMockerReadme(mockerName) {\n  return (dispatch, getState) => {\n    return dispatch(fetchMockerReadme(mockerName));\n  };\n}\n\nfunction requestUpdateMocker(mockerName, newMockerState) {\n  return {\n    [CALL_API]: {\n      types: [\n        SET_ACTIVE_MODULE_REQUEST,\n        SET_ACTIVE_MODULE_REQUEST_SUCCESS,\n        SET_ACTIVE_MODULE_REQUEST_FAIL,\n      ],\n      url: `${getCGIBase()}/mocker/${mockerName}`,\n      type: 'POST',\n      data: newMockerState,\n    },\n  };\n}\n\nexport function setMockerActiveModule(mockerName, mockModuleName) {\n  return (dispatch, getState) => {\n    return dispatch(\n      requestUpdateMocker(mockerName, {\n        config: {\n          activeModule: mockModuleName,\n        },\n      }),\n    );\n  };\n}\n\nexport function setMockerDisable(mockerName, value) {\n  return (dispatch, getState) => {\n    return dispatch(\n      requestUpdateMocker(mockerName, {\n        config: {\n          disable: value,\n        },\n      }),\n    );\n  };\n}\n","import _ from 'lodash';\n\nimport {\n  MOCKER_README_REQUEST_SUCCESS,\n  MOCKER_REQUEST,\n  MOCKER_REQUEST_FAIL,\n  MOCKER_REQUEST_SUCCESS,\n  SET_ACTIVE_MODULE_REQUEST_SUCCESS,\n} from './action';\n\nconst initialState = {\n  isLoaded: false,\n  data: {},\n  readme: '',\n};\n\nfunction mockerInfo(state = initialState, action) {\n  let {type, data} = action,\n    update = {};\n\n  switch (type) {\n    case MOCKER_REQUEST:\n      update = {\n        isLoaded: false,\n      };\n      break;\n    case MOCKER_REQUEST_SUCCESS:\n      update = {\n        isLoaded: true,\n        data: _.merge({}, data, {\n          modules: (data.modules || []).sort((a, b) => {\n            return b.priority - a.priority;\n          }),\n        }),\n      };\n      break;\n    case MOCKER_REQUEST_FAIL:\n      update = {\n        isLoaded: true,\n      };\n      break;\n\n    case MOCKER_README_REQUEST_SUCCESS:\n      update = {\n        readme: data.html,\n      };\n      break;\n\n    case SET_ACTIVE_MODULE_REQUEST_SUCCESS:\n      update.data = _.merge({}, state.data, data);\n      break;\n\n    default:\n      break;\n  }\n\n  return Object.keys(update).length ? Object.assign({}, state, update) : state;\n}\n\nexport default mockerInfo;\n","import reducer from './reducer';\n\nexport {\n  loadMocker,\n  loadMockerReadme,\n  setMockerActiveModule,\n  setMockerDisable,\n  SET_ACTIVE_MODULE_REQUEST_SUCCESS,\n} from './action';\n\nexport const mockerInfo = reducer;\n","import {CALL_API} from '../../../../middlewares/api';\nimport {getCGIBase} from '../../../../custom';\n\nexport const MOCKER_LIST_REQUEST = 'MOCKER_LIST_REQUEST';\nexport const MOCKER_LIST_REQUEST_SUCCESS = 'MOCKER_LIST_REQUEST_SUCCESS';\nexport const MOCKER_LIST_REQUEST_FAIL = 'MOCKER_LIST_REQUEST_FAIL';\n\nfunction fetchMockerList() {\n  return {\n    [CALL_API]: {\n      types: [MOCKER_LIST_REQUEST, MOCKER_LIST_REQUEST_SUCCESS, MOCKER_LIST_REQUEST_FAIL],\n      url: `${getCGIBase()}/mocker`,\n    },\n  };\n}\n\nexport function loadMockerList() {\n  return (dispatch, getState) => {\n    return dispatch(fetchMockerList());\n  };\n}\n","import _ from 'lodash';\n\nimport {MOCKER_LIST_REQUEST_FAIL, MOCKER_LIST_REQUEST_SUCCESS} from './action';\n\nimport {SET_ACTIVE_MODULE_REQUEST_SUCCESS} from '../data-mocker';\n\nconst initialState = {\n  isLoaded: false,\n  list: [],\n};\n\nfunction mockerListInfo(state = initialState, action) {\n  let {type, data} = action,\n    update = {};\n\n  switch (type) {\n    case MOCKER_LIST_REQUEST_SUCCESS:\n      update = {\n        isLoaded: true,\n        list: (data || []).sort((a, b) => {\n          return b.priority - a.priority;\n        }),\n      };\n      break;\n    case MOCKER_LIST_REQUEST_FAIL:\n      update = {\n        isLoaded: true,\n      };\n      break;\n\n    case SET_ACTIVE_MODULE_REQUEST_SUCCESS:\n      update.list = state.list.map(item => {\n        if (item.name === data.name) {\n          item = _.merge({}, item, data);\n        }\n        return item;\n      });\n      break;\n\n    default:\n      break;\n  }\n\n  return Object.keys(update).length ? Object.assign({}, state, update) : state;\n}\n\nexport default mockerListInfo;\n","import reducer from './reducer';\n\nexport {loadMockerList} from './action';\n\nexport const mockerListInfo = reducer;\n","import {CALL_API} from '../../middlewares/api';\nimport {getCGIBase} from '../../custom';\n\nexport const DETAIL_REQUEST = 'DETAIL_REQUEST';\nexport const DETAIL_REQUEST_SUCCESS = 'DETAIL_REQUEST_SUCCESS';\nexport const DETAIL_REQUEST_FAIL = 'DETAIL_REQUEST_FAIL';\n\nfunction fetchDetail() {\n  return {\n    [CALL_API]: {\n      types: [DETAIL_REQUEST, DETAIL_REQUEST_SUCCESS, DETAIL_REQUEST_FAIL],\n      url: `${getCGIBase()}/detail`,\n    },\n  };\n}\n\nexport function loadDetail() {\n  return (dispatch, getState) => {\n    return dispatch(fetchDetail());\n  };\n}\n","import {DETAIL_REQUEST, DETAIL_REQUEST_FAIL, DETAIL_REQUEST_SUCCESS} from './action';\nimport _ from 'lodash';\n\nconst initialState = {\n  isLoaded: false,\n  config: {},\n};\n\nexport default function detailInfo(state = initialState, action) {\n  let {type, data} = action,\n    update = {};\n\n  switch (type) {\n    case DETAIL_REQUEST:\n      update = {\n        isLoaded: false,\n      };\n      break;\n\n    case DETAIL_REQUEST_SUCCESS:\n      update = _.merge(\n        {\n          isLoaded: true,\n        },\n        state,\n        data,\n      );\n      break;\n\n    case DETAIL_REQUEST_FAIL:\n      update = {\n        isLoaded: true,\n      };\n      break;\n\n    default:\n      break;\n  }\n\n  return Object.keys(update).length ? Object.assign({}, state, update) : state;\n}\n","import reducer from './reducer';\n\nexport {loadDetail} from './action';\n\nexport const detailInfo = reducer;\n","import {combineReducers} from 'redux';\n\nimport {mockerInfo} from '../pages/mockers/data/data-mocker';\nimport {mockerListInfo} from '../pages/mockers/data/data-mocker-list';\nimport {detailInfo} from '../datas/data-detail';\n\nconst rootReducer = combineReducers({\n  mockerInfo: mockerInfo,\n  mockerListInfo: mockerListInfo,\n  detailInfo: detailInfo,\n});\n\nexport default rootReducer;\n","import {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\n\nimport api from '../middlewares/api';\nimport rootReducer from '../reducers';\n\nconst configureStore = preloadedState =>\n  createStore(rootReducer, preloadedState, applyMiddleware(thunk, api));\n\nexport default configureStore;\n","import React, { Component } from 'react';\nimport { Layout, Menu } from 'antd';\nimport { NavLink } from 'react-router-dom';\n\nimport { getSiteBase, getSiteRoot } from '../../custom';\n\nimport './index.less';\n\nclass LayoutHeader extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      activeMenu: '',\n      isInit: false,\n    };\n  }\n\n  handleIsActive = curMenu => {\n    if (!curMenu) {\n      return;\n    }\n    // console.log('---handleIsActive---', curMenu);\n\n    const map = {\n      [getSiteRoot()]: 'home',\n      [`${getSiteBase()}/dashboard`]: 'home',\n      [`${getSiteBase()}/mockers`]: 'mockers',\n      [`${getSiteBase()}/debug`]: 'debug',\n    };\n\n    let newMenuId = map[curMenu.url];\n\n    if (newMenuId && newMenuId !== this.state.activeMenu) {\n      setTimeout(() => {\n        this.setState({\n          activeMenu: newMenuId,\n          isInit: true,\n        });\n      }, 0);\n    }\n  };\n\n  render() {\n    let { activeMenu } = this.state;\n\n    // 如果被嵌套在 iframe 中，则不展示导航\n    if (window.self !== window.top) {\n      return null;\n    }\n\n    return (\n      <Layout.Header className=\"layout-header header\">\n        <Menu\n          theme=\"dark\"\n          mode=\"horizontal\"\n          selectedKeys={[activeMenu]}\n          style={{ lineHeight: '64px' }}>\n          <Menu.Item key=\"home\">\n            <NavLink to={`${getSiteBase()}/dashboard`} isActive={this.handleIsActive}>\n              首页\n            </NavLink>\n          </Menu.Item>\n\n          <Menu.Item key=\"mockers\">\n            <NavLink to={`${getSiteBase()}/mockers`} isActive={this.handleIsActive}>\n              数据模拟\n            </NavLink>\n          </Menu.Item>\n\n          {/*<Menu.Item key=\"debug\">*/}\n          {/*  <NavLink to={`${getSiteBase()}/debug`} isActive={this.handleIsActive}>*/}\n          {/*    debug*/}\n          {/*  </NavLink>*/}\n          {/*</Menu.Item>*/}\n        </Menu>\n      </Layout.Header>\n    );\n  }\n}\n\nexport default LayoutHeader;\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport {getPort, getSiteRoot} from '../../../../custom';\n\nimport './index.less';\n\nclass ProxyInfo extends Component {\n  render() {\n    const {localServerConfig} = this.props;\n\n    // hostname 应该与页面一致\n    const hostname = window.location.hostname;\n\n    // 如果是本地服务，则需要更换端口号为服务端返回的端口号。\n    // 例如本地调试的页面是 127.0.0.1:3000 而 mock server 是 127.0.0.1:9527\n    const port =\n      hostname === 'localhost' || hostname === '127.0.0.1'\n        ? localServerConfig.port\n        : window.location.port;\n\n    let mockStarHost = hostname + (port ? `:${port}` : '') + getSiteRoot().slice(0, -1);\n\n    return (\n      <div className=\"proxy-info\">\n        <h2>代理设置</h2>\n\n        <blockquote>\n          强烈推荐使用{' '}\n          <a href=\"https://avwo.github.io/whistle/\" target=\"_blank\">\n            whistle\n          </a>{' '}\n          来做代理服务器。\n        </blockquote>\n        <p>\n          假设真实的CGI请求为 <code>http://youdomain.com/cgi-bin/a/b/demo_01</code>\n          ，则请设置代理如下：\n        </p>\n\n        <pre>\n          <code>\n            <p>youdomain.com {mockStarHost}</p>\n            <p> </p>\n            <p># 或者</p>\n            <p>youdomain.com/cgi-bin/a/b/demo_01 {mockStarHost}</p>\n            <p> </p>\n            <p># 或者</p>\n            <p>youdomain.com/cgi-bin {mockStarHost}</p>\n          </code>\n        </pre>\n\n        {getSiteRoot().length > 1 ? (\n          <div>\n            注意，由于您启用了 <code>namespace</code> 参数，因此，需要在 nginx\n            的配置中增加如下配置，否则代理将无法生效！\n            <pre>\n              <code>\n                <p>\n                  location ^~ {getSiteRoot()} {'{'}\n                </p>\n                <p> rewrite {getSiteRoot()}(.*) /$1 break;</p>\n                <p> proxy_pass http://127.0.0.1:{getPort()}/;</p>\n                <p>{'}'}</p>\n              </code>\n            </pre>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const {detailInfo} = state;\n\n  return {\n    localServerConfig: detailInfo.config,\n  };\n}\n\nexport default connect(mapStateToProps)(ProxyInfo);\n","import React, {Component} from 'react';\n\nimport ProxyInfo from './components/proxy-info';\n\nimport './index.less';\n\nexport default class Home extends Component {\n  constructor(props, context) {\n    super(props, context);\n  }\n\n  render() {\n    return (\n      <div className=\"page-home text-content\">\n        <h2>HOME</h2>\n        <p>\n          欢迎使用{' '}\n          <a href=\"https://github.com/mockstarjs/mockstar\" target=\"_blank\">\n            mockstar\n          </a>\n          ，欢迎给我们提{' '}\n          <a href=\"https://github.com/mockstarjs/mockstar/issues\" target=\"_blank\">\n            Issues\n          </a>\n          ！\n        </p>\n\n        <ProxyInfo />\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport {Alert, Button, Card} from 'antd';\nimport {NavLink} from 'react-router-dom';\n\nimport './index.less';\n\nexport default function MockerListItem(props) {\n  const {mockerItem, mockersPath, curTag, index, clickTag, setActive, setDisable} = props;\n  const mockerItemConfig = mockerItem.config;\n\n  const isDisabled = mockerItemConfig.disable;\n\n  return (\n    <Card\n      className=\"mocker-list-item\"\n      title={`${index + 1}. ${mockerItem.name}`}\n      extra={\n        <div className=\"card-action\">\n          <Button\n            type={isDisabled ? 'primary' : 'default'}\n            icon=\"setting\"\n            className=\"set-disable-btn\"\n            onClick={setDisable.bind(this, mockerItem.name, isDisabled)}>\n            {isDisabled ? '启用' : '禁用'}\n          </Button>\n\n          <NavLink to={`${mockersPath}/${mockerItem.name}`}>更多...</NavLink>\n        </div>\n      }>\n      <div className={mockerItemConfig.plugin + ' ' + mockerItemConfig.method} />\n\n      <div className=\"detail\">\n        <Alert message={mockerItemConfig.description} type=\"info\" showIcon />\n      </div>\n\n      <p>点击标签进行过滤：</p>\n\n      <Button.Group>\n        {mockerItemConfig.tags.map((tagName, tagIndex) => {\n          return (\n            <Button\n              key={tagIndex}\n              className={tagName === curTag ? 'active' : ''}\n              icon=\"tag\"\n              onClick={clickTag.bind(this, tagName)}>\n              {tagName}\n            </Button>\n          );\n        })}\n      </Button.Group>\n\n      <br />\n      <br />\n\n      <p>请选择需要激活的模块：</p>\n      <Button.Group>\n        {mockerItem.mockModuleList.map((item, index) => {\n          return (\n            <Button\n              key={index}\n              disabled={isDisabled ? 'disable' : ''}\n              className={item.name === mockerItemConfig.activeModule ? 'active' : ''}\n              icon={item.name === mockerItemConfig.activeModule ? 'check' : ''}\n              onClick={setActive.bind(this, mockerItem.name, item.name)}>\n              {item.name}\n            </Button>\n          );\n        })}\n      </Button.Group>\n    </Card>\n  );\n}\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport _ from 'lodash';\n\nimport {Button, Col, Row} from 'antd';\n\nimport {loadMockerList} from '../../data/data-mocker-list';\nimport ListItem from './list-item';\n\nimport './index.less';\nimport {setMockerActiveModule, setMockerDisable} from '../../data/data-mocker';\n\nclass MockersList extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      curTag: '全部',\n    };\n  }\n\n  componentDidMount() {\n    this.props.loadMockerList();\n  }\n\n  getAllTags() {\n    const {list} = this.props;\n\n    let arr = [];\n\n    list.forEach(item => {\n      arr = arr.concat(item.config.tags);\n    });\n\n    return _.uniq(arr);\n  }\n\n  getFilterList() {\n    const {curTag} = this.state;\n    const {list} = this.props;\n\n    return list.filter(item => item.config.tags.indexOf(curTag) > -1);\n  }\n\n  handleClickTag = tagName => {\n    this.setState({\n      curTag: tagName,\n    });\n  };\n\n  handleActive = (mockerName, mockModuleName) => {\n    this.props.setMockerActiveModule(mockerName, mockModuleName);\n  };\n\n  handleDisable = (mockerName, curIsDisabled) => {\n    this.props.setMockerDisable(mockerName, !curIsDisabled);\n  };\n\n  getResultToRenderList(filterList) {\n    let length = filterList.length;\n    let groupChildLength = 3;\n    let groupLength =\n      length % groupChildLength !== 0\n        ? parseInt(length / groupChildLength, 10) + 1\n        : parseInt(length / groupChildLength, 10);\n\n    let result = [];\n\n    for (let i = 0; i < groupLength; i++) {\n      let arr = [];\n\n      for (let j = i * groupChildLength; j < (i + 1) * groupChildLength && j < length; j++) {\n        // console.log('=====', i, j, filterList[j].name);\n        arr.push(filterList[j]);\n      }\n\n      result.push(arr);\n    }\n\n    return result;\n  }\n\n  render() {\n    const {match} = this.props;\n    const {curTag} = this.state;\n\n    const tagList = this.getAllTags();\n    const filterList = this.getFilterList();\n\n    const list = this.getResultToRenderList(filterList);\n\n    return (\n      <div className=\"mockers\">\n        <div className=\"tag-wrapper\">\n          <Button.Group>\n            {tagList.map((tagName, tagIndex) => {\n              return (\n                <Button\n                  key={tagIndex}\n                  className={tagName === curTag ? 'active' : ''}\n                  icon=\"tag\"\n                  onClick={this.handleClickTag.bind(this, tagName)}>\n                  {tagName}\n                </Button>\n              );\n            })}\n          </Button.Group>\n        </div>\n\n        <div className=\"list-wrapper\">\n          {list.map((subList, subListIndex) => {\n            return (\n              <Row gutter={16} key={subListIndex}>\n                {subList.map((item, index) => {\n                  return (\n                    <Col span={8} key={index}>\n                      <ListItem\n                        index={subListIndex * 3 + index}\n                        curTag={curTag}\n                        mockerItem={item}\n                        mockersPath={match.url}\n                        clickTag={this.handleClickTag}\n                        setActive={this.handleActive}\n                        setDisable={this.handleDisable}\n                      />\n                    </Col>\n                  );\n                })}\n              </Row>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const {mockerListInfo} = state;\n\n  return {\n    isLoaded: mockerListInfo.isLoaded,\n    list: mockerListInfo.list,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    loadMockerList() {\n      return dispatch(loadMockerList());\n    },\n\n    setMockerActiveModule(mockerName, mockModuleName) {\n      return dispatch(setMockerActiveModule(mockerName, mockModuleName));\n    },\n\n    setMockerDisable(mockerName, value) {\n      return dispatch(setMockerDisable(mockerName, value));\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MockersList);\n","import superagent from 'superagent';\n\nexport function ajax(opts = {}) {\n  // 当请求为POST类型时，预览结果时报错 #40\n  // query 为 null 的时候，需手动换为 undefined\n  const queryOpts = opts.data ? opts.data : undefined;\n\n  if (opts.method === 'post') {\n    return getDataByPost(opts.url, queryOpts);\n  } else {\n    return getDataByGet(opts.url, queryOpts);\n  }\n}\n\nexport function getDataByPost(url, queryOpts) {\n  return new Promise((resolve, reject) => {\n    superagent\n      .post(url)\n      .set('Content-Type', 'application/json')\n      .send(queryOpts)\n      // .withCredentials()\n      .end((err, res) => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(res.body);\n      });\n  });\n}\n\nexport function getDataByGet(url, queryOpts) {\n  return new Promise((resolve, reject) => {\n    superagent\n      .get(url)\n      .query(queryOpts)\n      // .withCredentials()\n      .end((err, res) => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(res.body);\n      });\n  });\n}\n","import React from 'react';\n\nimport {Breadcrumb} from 'antd';\nimport {NavLink} from 'react-router-dom';\n\nimport './index.less';\n\nexport default function MockerSwitcher(props) {\n  const {name, match} = props;\n\n  let arr = match.url.split('/');\n  arr.pop();\n\n  const parentPath = arr.join('/');\n\n  return (\n    <div className=\"mocker-breadcrumb\">\n      <Breadcrumb>\n        <Breadcrumb.Item>\n          <NavLink to={parentPath}> 列表 </NavLink>\n        </Breadcrumb.Item>\n\n        <Breadcrumb.Item>{name}</Breadcrumb.Item>\n      </Breadcrumb>\n    </div>\n  );\n}\n","import React from 'react';\nimport {Card, Col, Row} from 'antd';\n\nimport './index.less';\n\nexport default function MockerDetail(props) {\n  const {mockerItem} = props;\n\n  // 获得当前激活状态的那个 mock module\n  let mockModuleItem = (mockerItem.mockModuleList || []).filter(item => {\n    return item.name === mockerItem.config.activeModule;\n  })[0];\n\n  if (!mockModuleItem) {\n    return null;\n  }\n\n  return (\n    <Card className=\"mocker-detail\">\n      <div className={mockerItem.config.plugin + ' ' + mockerItem.config.method} />\n      <Row>\n        <Col span={12}>\n          <h2>{mockerItem.name}</h2>\n          <p>{mockerItem.config.description}</p>\n          <p>\n            {mockerItem.config.version ? `v${mockerItem.config.version}` : ''}\n            {mockerItem.config.author ? ` by ${mockerItem.config.author}` : ''}\n          </p>\n        </Col>\n\n        <Col span={12}>\n          <table>\n            <tbody>\n              <tr>\n                <td>数据类型:</td>\n                <td>{mockerItem.config.plugin}</td>\n              </tr>\n              <tr>\n                <td style={{width: '100px'}}>配置的路由:</td>\n                <td>{mockerItem.config.route}</td>\n              </tr>\n              <tr>\n                <td>已激活数据:</td>\n                <td>{mockerItem.config.activeModule}</td>\n              </tr>\n            </tbody>\n          </table>\n        </Col>\n      </Row>\n    </Card>\n  );\n}\n","import React, {Component} from 'react';\nimport {Button, Modal} from 'antd';\n\nimport './index.less';\n\nexport default class MockerShowResult extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      showData: '',\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.data !== nextProps.data) {\n      this.setState({\n        showData: JSON.stringify(nextProps.data, null, 2),\n      });\n    }\n  }\n\n  handleOnChange = event => {\n    this.setState({\n      showData: event.target.value,\n    });\n  };\n\n  render() {\n    const {data, mockerItem, onHide, onEmitPush} = this.props;\n    const {showData} = this.state;\n\n    const isShow = !!data;\n    const isShowEmitButton = mockerItem.config.plugin === 'async';\n\n    return (\n      <div className=\"mocker-show-result\">\n        <Modal\n          title=\"结果\"\n          visible={isShow}\n          onCancel={onHide}\n          onOk={onHide}\n          footer={[\n            isShowEmitButton ? (\n              <Button\n                key=\"push\"\n                type=\"primary\"\n                size=\"large\"\n                onClick={onEmitPush.bind(this, showData)}>\n                主动推送\n              </Button>\n            ) : null,\n            <Button key=\"cancel\" type=\"primary\" size=\"large\" onClick={onHide}>\n              知道了\n            </Button>,\n          ]}>\n          <textarea\n            name=\"cgidata\"\n            id=\"cgidata\"\n            style={{width: '100%', minHeight: '600px'}}\n            value={showData}\n            onChange={this.handleOnChange}\n          />\n        </Modal>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport {Alert, Button} from 'antd';\n\nimport './index.less';\n\nexport default function MockerSwitcher(props) {\n  const {isDisabled, activeModule, previewResult, updateDisable} = props;\n\n  return (\n    <div className=\"mocker-action\">\n      {isDisabled ? (\n        <Alert\n          message=\"当前 mock 服务已被禁用，您可请点击“启用”按钮开始 mock 服务！\"\n          type=\"warning\"\n          showIcon\n        />\n      ) : (\n        <Alert message=\"mock 服务已开始生效！\" type=\"success\" showIcon />\n      )}\n\n      <Button\n        type=\"primary\"\n        disabled={isDisabled ? 'disable' : ''}\n        icon=\"profile\"\n        onClick={previewResult}>\n        预览结果 【 {activeModule} 】\n      </Button>\n\n      <Button type={isDisabled ? 'primary' : 'default'} icon=\"setting\" onClick={updateDisable}>\n        {isDisabled ? '启用' : '禁用'} mock 服务\n      </Button>\n    </div>\n  );\n}\n","import React from 'react';\nimport {Card} from 'antd';\n\nimport './index.less';\n\nexport default function MockerProxyInfo(props) {\n  const {isDisabled, mockerItem, mockServerHost} = props;\n\n  // 非 xhr 场景无需设置代理\n  if (mockerItem.config.plugin !== 'xhr') {\n    return null;\n  }\n\n  if (isDisabled) {\n    return null;\n  }\n\n  return (\n    <Card className=\"mocker-proxy-info\">\n      <p>\n        whistle 代理设置：{' '}\n        <code>\n          /(.*){mockerItem.config.route}(.*)/ {mockServerHost}\n        </code>\n      </p>\n    </Card>\n  );\n}\n","import React from 'react';\nimport {Button, Table} from 'antd';\n\nimport './index.less';\n\nexport default function MockerMockModuleList(props) {\n  const {isLoaded, mockerItem, previewResult, updateActive} = props;\n\n  const activeModule = mockerItem.config.activeModule || '';\n  const mockModuleList = mockerItem.mockModuleList || [];\n\n  const tableColumns = [\n    {\n      title: '数据模型名称',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: '描述',\n      dataIndex: 'description',\n      key: 'description',\n      render: (text, record) => (\n        <div>\n          {record.config.version ? 'V' + record.config.version : ''}\n          {record.config.author ? ' by' + record.config.author : ''}\n          {record.config.description}\n        </div>\n      ),\n    },\n    {\n      title: '操作',\n      key: 'action',\n      render: (text, record) => (\n        <div>\n          <Button\n            type=\"primary\"\n            disabled={mockerItem.config.disable ? 'disable' : ''}\n            onClick={previewResult.bind(this, record.config.match)}>\n            预览结果\n          </Button>\n\n          <span className=\"ant-divider\" />\n\n          {record.name !== activeModule ? (\n            <Button\n              type=\"primary\"\n              disabled={mockerItem.config.disable ? 'disable' : ''}\n              onClick={updateActive.bind(this, record.name)}>\n              激活\n            </Button>\n          ) : (\n            <Button type=\"primary\" disabled={'disable'}>\n              已激活\n            </Button>\n          )}\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"mock-module-list\">\n      <Table loading={!isLoaded} rowKey=\"name\" columns={tableColumns} dataSource={mockModuleList} />\n    </div>\n  );\n}\n","import React from 'react';\nimport {Card} from 'antd';\n\nimport './index.less';\n\nexport default function MockerReadme(props) {\n  const {htmlContent} = props;\n\n  if (!htmlContent) {\n    return null;\n  }\n\n  return (\n    <div className=\"mocker-readme\">\n      <Card title=\"使用说明\">\n        <div\n          className=\"readme-content text-content\"\n          dangerouslySetInnerHTML={{__html: htmlContent}}\n        />\n      </Card>\n    </div>\n  );\n}\n","import React, {Component} from 'react';\nimport {Menu} from 'antd';\nimport {withRouter} from 'react-router-dom';\n\nimport './index.less';\n\nclass MockerMenu extends Component {\n  constructor(props, context) {\n    super(props, context);\n  }\n\n  handleClick = ({item, key}) => {\n    if (this.props.match.params.mockerName !== key) {\n      this.props.history.push(this.props.match.path.replace(/:mockerName/gi, key));\n\n      // 通知右侧重新刷新\n      this.props.refresh(key);\n    }\n  };\n\n  render() {\n    let {mockerListInfo, match} = this.props;\n    if (!mockerListInfo.isLoaded) {\n      return null;\n    }\n\n    let {mockerName} = match.params;\n\n    return (\n      <div className=\"mocker-menu\">\n        <Menu\n          defaultSelectedKeys={[mockerName]}\n          selectedKeys={[mockerName]}\n          // style={{ width: '300px' }}\n          onClick={this.handleClick}>\n          {mockerListInfo.list.map(item => {\n            return (\n              <Menu.Item key={item.name} className={item.config.plugin + ' ' + item.config.method}>\n                {item.name}\n              </Menu.Item>\n            );\n          })}\n        </Menu>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(MockerMenu);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Layout } from 'antd';\n\nimport { AsyncClient } from 'mockstar-client';\n\nimport { ajax } from '../../../../business/db';\n\nimport {\n  loadMocker,\n  loadMockerReadme,\n  setMockerActiveModule,\n  setMockerDisable,\n} from '../../data/data-mocker';\nimport { loadMockerList } from '../../data/data-mocker-list';\n\nimport MockerBreadcrumb from './display-breadcrumb';\nimport MockerDetail from './display-detail';\nimport MockerShowResult from './display-show-result';\nimport MockerSwitcher from './display-action';\nimport MockerProxyTips from './display-proxy-tips';\nimport MockModuleList from './display-mock-module-list';\nimport MockerReadme from './display-readme';\nimport MockerMenu from './display-menu';\n\nimport { getNamespace } from '../../../../custom';\n\nimport './index.less';\n\nclass Mocker extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      modalShowData: null,\n    };\n  }\n\n  componentDidMount() {\n    console.log('Mocker componentDidMount', this.props);\n\n    let { mockerName } = this.props.match.params;\n\n    // 加载这个 mocker 的信息\n    this.props.loadMocker(mockerName);\n    this.props.loadMockerReadme(mockerName);\n\n    // 加载所有的 mocker，主要是为了菜单展示\n    this.props.loadMockerList();\n  }\n\n  getMockServerHost() {\n    const { localServerConfig } = this.props;\n\n    // hostname 应该与页面一致\n    const hostname = window.location.hostname;\n\n    // 如果是本地服务，则需要更换端口号为服务端返回的端口号。\n    // 例如本地调试的页面是 127.0.0.1:3000 而 mock server 是 127.0.0.1:9527\n    const port =\n      hostname === 'localhost' || hostname === '127.0.0.1'\n        ? localServerConfig.port\n        : window.location.port;\n\n    // 有端口的时候一定要记得设置端口\n    return hostname + (port ? `:${port}` : '');\n  }\n\n  handlePreviewResult = query => {\n    const { mockerItem } = this.props;\n\n    let actualURL = mockerItem.config.route;\n\n    // 获得 host\n    let host = this.getMockServerHost();\n\n    if (mockerItem.config.plugin !== 'async') {\n      // 如果有指定的host，则使用指定的host\n      if (host && actualURL.indexOf(host) < 0) {\n        let namespace = getNamespace();\n        let url = actualURL.indexOf('/') === 0 ? actualURL : '/' + actualURL;\n        let fullPath = (namespace ? `/${namespace}` : '') + url;\n        actualURL = `http://${host}${fullPath}`;\n      }\n\n      ajax({\n        method: mockerItem.config.method,\n        url: actualURL,\n        data: query,\n      })\n        .then(data => {\n          if (process.env.NODE_ENV !== 'production') {\n            console.log(`url=${actualURL}`, query, data);\n          }\n\n          this.handleModalShow(data);\n        })\n        .catch(err => {\n          console.error(err);\n        });\n    } else {\n      let asyncClient = new AsyncClient(`http://${host}`);\n\n      asyncClient\n        .request(actualURL, query)\n        .then(data => {\n          if (process.env.NODE_ENV !== 'production') {\n            console.log(`url=${actualURL}`, query, data);\n          }\n\n          this.handleModalShow(data);\n        })\n        .catch(err => {\n          console.error(err);\n        });\n    }\n  };\n\n  handleActive = name => {\n    this.props.setMockerActiveModule(this.props.mockerItem.name, name);\n  };\n\n  handleModalShow = data => {\n    this.setState({\n      modalShowData: data,\n    });\n  };\n\n  handleModalHide = () => {\n    this.setState({\n      modalShowData: null,\n    });\n  };\n\n  handleModalEmitPush = data => {\n    console.log('--push---', data);\n    const { mockerItem } = this.props;\n\n    // 获得 host\n    let host = this.getMockServerHost();\n\n    let asyncClient = new AsyncClient(`http://${host}`);\n\n    asyncClient.emit('emitStub', {\n      route: mockerItem.config.route,\n      name: mockerItem.config.name,\n      activeModule: mockerItem.config.activeModule,\n      result: data,\n    });\n  };\n\n  handleDisable = () => {\n    this.props.setMockerDisable(this.props.mockerItem.name, !this.props.mockerItem.config.disable);\n  };\n\n  handleRefresh = mockerName => {\n    // 加载这个 mocker 的信息\n    this.props.loadMocker(mockerName);\n    this.props.loadMockerReadme(mockerName);\n  };\n\n  render() {\n    const { isLoaded, mockerItem, readme, match, mockerListInfo } = this.props;\n    const { modalShowData } = this.state;\n    const mockServerHost = this.getMockServerHost();\n\n    return (\n      <Layout className=\"mockers-mocker\">\n        <Layout.Sider className=\"mocker-sider\" width=\"300\">\n          <MockerMenu mockerListInfo={mockerListInfo} match={match} refresh={this.handleRefresh} />\n        </Layout.Sider>\n\n        <Layout className=\"mocker-content\">\n          <MockerBreadcrumb name={mockerItem.name} match={match} />\n\n          {isLoaded ? (\n            <div>\n              <MockerSwitcher\n                isDisabled={mockerItem.config.disable}\n                activeModule={mockerItem.config.activeModule}\n                previewResult={this.handlePreviewResult.bind(this, null)}\n                updateDisable={this.handleDisable}\n              />\n\n              <MockerProxyTips\n                isDisabled={mockerItem.config.disable}\n                mockerItem={mockerItem}\n                mockServerHost={mockServerHost}\n              />\n\n              <MockerDetail mockerItem={mockerItem} />\n\n              <MockModuleList\n                isLoaded={isLoaded}\n                mockerItem={mockerItem}\n                previewResult={this.handlePreviewResult}\n                updateActive={this.handleActive}\n              />\n\n              <MockerShowResult\n                data={modalShowData}\n                mockerItem={mockerItem}\n                onHide={this.handleModalHide}\n                onEmitPush={this.handleModalEmitPush}\n              />\n\n              <MockerReadme htmlContent={readme} />\n            </div>\n          ) : (\n            <div>加载中...</div>\n          )}\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { mockerInfo, mockerListInfo, detailInfo } = state;\n\n  return {\n    isLoaded: mockerInfo.isLoaded,\n    mockerItem: mockerInfo.data,\n    readme: mockerInfo.readme,\n    mockerListInfo: mockerListInfo,\n    localServerConfig: detailInfo.config,\n    hostname: detailInfo.hostname,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    loadMockerList() {\n      return dispatch(loadMockerList());\n    },\n\n    loadMocker(mockerName) {\n      return dispatch(loadMocker(mockerName));\n    },\n\n    loadMockerReadme(mockerName) {\n      return dispatch(loadMockerReadme(mockerName));\n    },\n\n    setMockerActiveModule(mockerName, mockModuleName) {\n      return dispatch(setMockerActiveModule(mockerName, mockModuleName));\n    },\n\n    setMockerDisable(mockerName, value) {\n      return dispatch(setMockerDisable(mockerName, value));\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Mocker);\n","import React from 'react';\nimport {Route} from 'react-router-dom';\n\nimport List from './components/list';\nimport Mocker from './components/mocker';\n\nimport './index.less';\n\nexport default function MockersContainer(props) {\n  let {match} = props;\n\n  return (\n    <div className=\"page-mockers\">\n      <Route path={`${match.url}/:mockerName`} component={Mocker} />\n      <Route exact path={match.url} component={List} />\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { Button, Form, Input } from 'antd';\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nconst debugJsonData = {\n  retcode: 0,\n  result: {\n    description: '我是 debug',\n  },\n};\n\nexport default class CreateMockerForm extends Component {\n  formRef = React.createRef();\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    if (\n      this.props.localServerConfig.mockServerPath !== nextProps.localServerConfig.mockServerPath\n    ) {\n      this.formRef.current.setFieldsValue({\n        parentPath: nextProps.localServerConfig.mockServerPath,\n      });\n    }\n  }\n\n  onFinish = values => {\n    console.log('Success:', values);\n    this.props.handleCreateMocker(values);\n  };\n\n  onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  render() {\n    const { localServerConfig } = this.props;\n\n    const initialValues = {\n      parentPath: localServerConfig.mockServerPath,\n      mockerName: 'i-am-xhr-request-get',\n      mockerMethod: 'GET',\n      mockerRoute: '/cgi-bin/i-am-xhr-request-get',\n      debugMockModuleJsonData: JSON.stringify(debugJsonData, null, 2),\n    };\n\n    return (\n      <Form\n        {...layout}\n        name=\"basic\"\n        ref={this.formRef}\n        initialValues={initialValues}\n        onFinish={this.onFinish}\n        onFinishFailed={this.onFinishFailed}>\n        <Form.Item\n          label=\"父级目录\"\n          name=\"parentPath\"\n          rules={[{ required: true, message: 'Please input your parentPath!' }]}>\n          <Input value={localServerConfig.mockServerPath} />\n        </Form.Item>\n\n        <Form.Item\n          label=\"mocker name\"\n          name=\"mockerName\"\n          rules={[{ required: true, message: 'Please input your mockerName!' }]}>\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label=\"mocker method\"\n          name=\"mockerMethod\"\n          rules={[{ required: true, message: 'Please input your mockerMethod!' }]}>\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label=\"mocker route\"\n          name=\"mockerRoute\"\n          rules={[{ required: true, message: 'Please input your mockerRoute!' }]}>\n          <Input />\n        </Form.Item>\n\n        <Form.Item label=\"桩数据\" name=\"debugMockModuleJsonData\">\n          <Input.TextArea autoSize />\n        </Form.Item>\n\n        <Form.Item {...tailLayout}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            提交\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Alert, Divider, Tag } from 'antd';\n\nimport CreateMockerForm from './create-mocker-form';\n\nimport { getDataByPost } from '../../../../business/db';\nimport { getCGIBase } from '../../../../custom';\n\nimport './index.less';\n\nclass CreateMocker extends Component {\n  state = {\n    logs: [],\n    message: '',\n    messageType: 'info',\n  };\n\n  getMockServerHost() {\n    const { localServerConfig } = this.props;\n\n    // hostname 应该与页面一致\n    const hostname = window.location.hostname;\n\n    // 如果是本地服务，则需要更换端口号为服务端返回的端口号。\n    // 例如本地调试的页面是 127.0.0.1:3000 而 mock server 是 127.0.0.1:9527\n    const port =\n      hostname === 'localhost' || hostname === '127.0.0.1'\n        ? localServerConfig.port\n        : window.location.port;\n\n    // 有端口的时候一定要记得设置端口\n    return hostname + (port ? `:${port}` : '');\n  }\n\n  handleCreateMocker = queryData => {\n    // 获得 requestURL\n    let requestURL = `${getCGIBase()}/create-mocker`;\n\n    if (process.env.NODE_ENV !== 'production') {\n      requestURL = 'http://127.0.0.1:9527' + requestURL;\n    }\n\n    this.addLog(`准备发送请求：${JSON.stringify(queryData)}`);\n\n    getDataByPost(requestURL, queryData)\n      .then(data => {\n        if (process.env.NODE_ENV !== 'production') {\n          console.log(`url=${requestURL}`, queryData, data);\n        }\n\n        if (data.status === 200) {\n          this.addLog(data, 'success');\n        } else {\n          this.addLog(data.result, 'error');\n        }\n      })\n      .catch(err => {\n        console.error(err);\n\n        this.addLog((err && err.message) || err, 'error');\n      });\n  };\n\n  addLog = (message, messageType = 'info') => {\n    this.setState({\n      logs: [\n        ...this.state.logs,\n        {\n          message: typeof message === 'object' ? JSON.stringify(message) : message,\n          messageType,\n        },\n      ],\n    });\n  };\n\n  render() {\n    const { localServerConfig } = this.props;\n    const { logs } = this.state;\n\n    return (\n      <div className=\"create-mocker\">\n        <h2>创建 mocker</h2>\n\n        <CreateMockerForm\n          localServerConfig={localServerConfig}\n          handleCreateMocker={this.handleCreateMocker}\n        />\n\n        {logs.map((item, index) => {\n          return (\n            <div key={index}>\n              <Tag>{index}</Tag>\n              <Alert message={item.message} type={item.messageType} />\n              <Divider />\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { detailInfo } = state;\n\n  return {\n    localServerConfig: detailInfo.config,\n  };\n}\n\nexport default connect(mapStateToProps)(CreateMocker);\n","import React, { Component } from 'react';\n\nimport CreateMocker from './components/create-mocker';\n\nimport './index.less';\n\nexport default class Debug extends Component {\n  constructor(props, context) {\n    super(props, context);\n  }\n\n  render() {\n    return (\n      <div className=\"page-debug text-content\">\n        <CreateMocker />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\n\nimport { Layout } from 'antd';\n\nimport LayoutHeader from './components/layout-header';\n\nimport Home from './pages/home';\nimport Mockers from './pages/mockers';\nimport Debug from './pages/debug';\n\nimport { getSiteBase } from './custom';\nimport { loadDetail } from './datas/data-detail';\n\nimport './App.less';\n\nexport default class App extends Component {\n  componentDidMount() {\n    // 加载管理端的信息，包括配置等\n    this.props.dispatch(loadDetail());\n  }\n\n  render() {\n    return (\n      <Router>\n        <Layout className=\"mockstar-container\">\n          <LayoutHeader />\n\n          <Layout.Content>\n            <Switch>\n              <Redirect exact from=\"/\" to={`${getSiteBase()}/mockers`} />\n              <Redirect exact from={`${getSiteBase()}`} to={`${getSiteBase()}/mockers`} />\n              <Route path={`${getSiteBase()}/dashboard`} component={Home} />\n              <Route path={`${getSiteBase()}/mockers`} component={Mockers} />\n              <Route path={`${getSiteBase()}/debug`} component={Debug} />\n            </Switch>\n          </Layout.Content>\n        </Layout>\n      </Router>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {connect, Provider} from 'react-redux';\nimport createStore from './store';\n\nimport App from './App';\n\nconst store = createStore(window.__initialState);\n\nfunction mapStateToProps(state) {\n  return state;\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatch,\n  };\n}\n\nconst Root = connect(mapStateToProps, mapDispatchToProps)(App);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Root />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}