{"version":3,"sources":["../../mockstar-client/lib/index.js","../../mockstar-client/lib/util-async.js","../../mockstar-client/lib/model/AsyncClient.js","../../mockstar-client/lib/model/SocketClient.js","middlewares/api.js","custom.js","pages/mockers/data/data-mocker/action.js","pages/mockers/data/data-mocker/reducer.js","pages/mockers/data/data-mocker/index.js","pages/mockers/data/data-mocker-list/action.js","pages/mockers/data/data-mocker-list/reducer.js","pages/mockers/data/data-mocker-list/index.js","datas/data-detail/action.js","datas/data-detail/reducer.js","datas/data-detail/index.js","reducers/index.js","store/index.js","components/layout-header/index.js","pages/home/components/proxy-info/index.js","pages/home/index.js","pages/mockers/components/list/list-item/index.js","pages/mockers/components/list/index.js","business/db/index.js","pages/mockers/components/mocker/display-breadcrumb/index.js","pages/mockers/components/mocker/display-detail/index.js","pages/mockers/components/mocker/display-show-result/index.js","pages/mockers/components/mocker/display-action/index.js","pages/mockers/components/mocker/display-proxy-tips/index.js","pages/mockers/components/mocker/display-mock-module-list/index.js","pages/mockers/components/mocker/display-readme/index.js","pages/mockers/components/mocker/display-menu/index.js","pages/mockers/components/mocker/index.js","pages/mockers/index.js","pages/debug/components/create-mocker/create-mocker-form/index.js","pages/debug/components/create-mocker/index.js","pages/debug/components/search-mocker/search-mocker-form/index.js","pages/debug/components/search-mocker/index.js","pages/debug/index.js","App.js","index.js"],"names":["Object","defineProperty","exports","value","request","listen","AsyncClient","AsyncClient_1","require","enumerable","get","util_async_1","RESULT","_check","asyncClient","route","Promise","resolve","reject","checkT","i","checkConnect","isConnected","clearTimeout","alert","getURI","setTimeout","params","then","emit","data","_disable","catch","err","callback","on","SocketClient_1","url","opts","this","SocketClient","__importDefault","mod","__esModule","socket_io_client_1","socket","default","seq","init","console","log","id","connected","io","uri","eventName","Date","now","once","STATUS","store","next","action","type","types","requestType","successType","failureType","actionWith","_action","assign","obj","finalAction","requestURL","send","res","body","resData","_onSuccess","stack","errno","error","_onFail","getLocalServerConfig","config","_","merge","namespace","adminSiteRouteName","adminCGIRouteName","window","_mockstar_config_","getSiteRoot","getSiteBase","getCGIBase","loadMocker","mockerName","dispatch","getState","fetchMocker","loadMockerReadme","fetchMockerReadme","requestUpdateMocker","newMockerState","setMockerActiveModule","mockModuleName","activeModule","setMockerDisable","disable","initialState","isLoaded","readme","mockerInfo","state","update","modules","sort","a","b","priority","html","keys","length","loadMockerList","list","mockerListInfo","map","item","name","loadDetail","detailInfo","rootReducer","combineReducers","configureStore","preloadedState","createStore","applyMiddleware","thunk","api","LayoutHeader","props","context","handleIsActive","curMenu","newMenuId","activeMenu","setState","isInit","self","top","Header","className","theme","mode","selectedKeys","style","lineHeight","Item","key","NavLink","to","isActive","Component","ProxyInfo","localServerConfig","hostname","location","port","mockStarHost","slice","href","target","rel","connect","Home","MockerListItem","mockerItem","mockersPath","curTag","index","clickTag","setActive","setDisable","mockerItemConfig","isDisabled","title","extra","icon","onClick","bind","plugin","method","message","description","showIcon","Group","onChange","e","tags","tagName","tagIndex","Button","disabled","mockModuleList","MockersList","handleClickTag","handleSelectTagChange","handleActive","handleDisable","curIsDisabled","arr","forEach","concat","uniq","filter","indexOf","filterList","groupLength","parseInt","result","j","push","match","tagList","getAllTags","getFilterList","getResultToRenderList","subList","subListIndex","gutter","span","getDataByPost","queryOpts","superagent","post","set","end","getDataByGet","query","MockerSwitcher","split","pop","parentPath","join","MockerDetail","version","author","width","MockerShowResult","handleOnChange","event","showData","nextProps","JSON","stringify","onHide","onEmitPush","isShow","isShowEmitButton","visible","onCancel","onOk","footer","size","minHeight","previewResult","updateDisable","MockerProxyInfo","mockServerHost","MockerMockModuleList","updateActive","tableColumns","dataIndex","render","text","record","loading","rowKey","columns","dataSource","MockerReadme","htmlContent","dangerouslySetInnerHTML","__html","MockerMenu","handleClick","history","path","replace","refresh","defaultSelectedKeys","withRouter","Mocker","handlePreviewResult","actualURL","host","getMockServerHost","fullPath","undefined","ajax","handleModalShow","modalShowData","handleModalHide","handleModalEmitPush","handleRefresh","Sider","MockersContainer","Route","component","exact","List","layout","labelCol","wrapperCol","tailLayout","offset","debugJsonData","retcode","CreateMockerForm","formRef","React","createRef","onFinish","values","handleCreateMocker","onFinishFailed","errorInfo","nextContext","mockServerPath","current","setFieldsValue","initialValues","mockerMethod","mockerRoute","debugMockModuleJsonData","ref","label","rules","required","TextArea","autoSize","htmlType","CreateMocker","logs","messageType","queryData","addLog","handleSearchMocker","Debug","App","Content","Switch","Redirect","from","Mockers","__initialState","Root","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.047617fb.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.request = exports.listen = exports.AsyncClient = void 0;\nconst AsyncClient_1 = require(\"./model/AsyncClient\");\nObject.defineProperty(exports, \"AsyncClient\", { enumerable: true, get: function () { return AsyncClient_1.AsyncClient; } });\nconst util_async_1 = require(\"./util-async\");\nObject.defineProperty(exports, \"listen\", { enumerable: true, get: function () { return util_async_1.listen; } });\nObject.defineProperty(exports, \"request\", { enumerable: true, get: function () { return util_async_1.request; } });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.listen = exports.request = void 0;\nconst RESULT = {\n    // 成功\n    SUCCESS: 'SUCCESS',\n    // asyncClient 未初始化\n    NO_ASYNC_CLIENT: 'NO_ASYNC_CLIENT',\n    // 桩数据服务启动失败\n    NOT_CONNECTED: 'NOT_CONNECTED',\n    // 没有路由\n    NO_ROUTE: 'NO_ROUTE',\n    // 桩数据服务被设置了禁用\n    DISABLED: 'DISABLED',\n};\n/**\n * 请求数据\n *\n * @param {AsyncClient} asyncClient AsyncClient对象\n * @param {String} route 路由\n * @param {Object} [params] 参数\n * @return {Promise<any>}\n */\nfunction request(asyncClient, route, params) {\n    return new Promise((resolve, reject) => {\n        _check(asyncClient, route)\n            .then(() => {\n            // 发送信息到远程，然后接收其回调\n            asyncClient.emit(route, params, function (data) {\n                // 如果async服务端设置了禁用async，则执行真实的fetch方法\n                if (data && data._disable) {\n                    return reject(RESULT.DISABLED);\n                }\n                resolve(data);\n            });\n        })\n            .catch(err => {\n            reject(err);\n        });\n    });\n}\nexports.request = request;\n/**\n * 监听数据\n *\n * @param {AsyncClient} asyncClient AsyncClient对象\n * @param {String} route 路由\n * @param {Function} callback 回调\n */\nfunction listen(asyncClient, route, callback) {\n    _check(asyncClient, route)\n        .then(() => {\n        asyncClient.on(route, callback);\n    })\n        .catch(err => {\n        throw err;\n    });\n}\nexports.listen = listen;\n/**\n * 检查参数\n * @param {AsyncClient} asyncClient AsyncClient对象\n * @param {String} route 路由\n * @return {Promise<any>}\n */\nfunction _check(asyncClient, route) {\n    return new Promise((resolve, reject) => {\n        // 有问题时直接执行真实的fetch方法\n        if (!asyncClient) {\n            return reject(RESULT.NO_ASYNC_CLIENT);\n        }\n        // 如果远程服务未启动也需要放弃async\n        if (!route) {\n            return reject(RESULT.NO_ROUTE);\n        }\n        let i = 0;\n        let checkT;\n        function checkConnect() {\n            if (asyncClient.isConnected()) {\n                // 如果已经连接成功，则清除定时器，并返回\n                if (checkT) {\n                    clearTimeout(checkT);\n                }\n                resolve();\n            }\n            else if (i > 9) {\n                // 如果重试次数大于了10次，也终止，清除定时器，并返回\n                if (checkT) {\n                    clearTimeout(checkT);\n                }\n                alert(`mockstar async 服务未启动！请检查 ${asyncClient.getURI()} 是否已启动`);\n                reject(RESULT.NOT_CONNECTED);\n            }\n            else {\n                i++;\n                // 使之异步，避免 websocket 还未连接成功\n                checkT = setTimeout(() => {\n                    checkConnect();\n                }, 10);\n            }\n        }\n        checkConnect();\n    });\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AsyncClient = void 0;\nconst SocketClient_1 = require(\"./SocketClient\");\nconst util_async_1 = require(\"../util-async\");\nclass AsyncClient extends SocketClient_1.SocketClient {\n    /**\n     *\n     * @param {String} [url] socket启动地址，例如 http://10.66.95.54:3000'，如果是移动端代理，记得要写IP，而不能够使用 localhost 或者 127.0.0.1 这种\n     * @param {Object} [opts] 额外参数\n     */\n    constructor(url, opts = {}) {\n        super(url);\n        this.opts = opts;\n    }\n    listen(route, callback) {\n        util_async_1.listen(this, route, callback);\n    }\n    request(route, params) {\n        return util_async_1.request(this, route, params);\n    }\n}\nexports.AsyncClient = AsyncClient;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SocketClient = void 0;\nconst socket_io_client_1 = __importDefault(require(\"socket.io-client\"));\nclass SocketClient {\n    /**\n     *\n     * @param {String} [url] socket启动地址，例如 http://10.66.95.54:3000'，如果是移动端代理，记得要写IP，而不能够使用 localhost 或者 127.0.0.1 这种\n     */\n    constructor(url) {\n        this.url = url || 'http://local.mockstarjs.org';\n        this.socket = socket_io_client_1.default(this.url);\n        // 序列号，用于识别不同的事件\n        this.seq = 0;\n        this.init();\n    }\n    init() {\n        this.socket.on('connect', () => {\n            console.log('connect ' + this.socket.id + ' for ' + this.url);\n        });\n        this.socket.on('disconnect', () => {\n            console.log('disconnect ' + this.socket.id);\n        });\n    }\n    isConnected() {\n        return this.socket.connected;\n    }\n    getURI() {\n        return (this.socket.io && this.socket.io.uri) || '';\n    }\n    /**\n     * 监听某个桩数据回调\n     * @param {String} route 路由\n     * @param {Function} callback 回调，接受一个参数：data（结果）\n     */\n    on(route, callback) {\n        this.socket.on(route, (data) => {\n            console.log('[SocketClient on data]', route, data);\n            if (typeof callback === 'function') {\n                callback(data);\n            }\n        });\n    }\n    /**\n     * 主动查询某个桩数据\n     * @param {String} route 路由\n     * @param {Object} params 额外的参数\n     * @param {Function} callback 回调，接受一个参数：data（结果）\n     */\n    emit(route, params = {}, callback) {\n        if (typeof callback === 'function') {\n            // 生成一个唯一的事件名，以便能够监听桩数据的返回\n            const eventName = `[${Date.now()}][${this.seq}]${route}`;\n            this.seq++;\n            // 触发请求\n            this.socket.emit(route, params, {\n                eventName: eventName,\n            });\n            // 接受回调，此处只接受一次。虽然 eventName 已经是唯一的，但是 once 只监听一次，可以避免内存被占用\n            this.socket.once(eventName, (data) => {\n                console.log('[SocketClient once data after emit]', eventName, route, data);\n                callback(data);\n            });\n        }\n        else {\n            // 触发请求\n            this.socket.emit(route, params);\n        }\n    }\n}\nexports.SocketClient = SocketClient;\n","import request from 'superagent';\n\nconst STATUS = 'storeStatus';\n\nexport const CALL_API = 'Call API';\n\nexport default store => next => action => {\n  /**\n   * opts 字段说明：\n   *  url: CGI请求地址\n   *  types: action的type值数组，按顺序依次代表: requestType, successType, failureType\n   *  type: ajax的类型，get或者post\n   *  data: 请求的参数对象\n   *\n   * @type {{url:String, types:String[], type:String, data:Object}}\n   */\n  const opts = action[CALL_API];\n\n  if (typeof opts === 'undefined') {\n    return next(action);\n  }\n\n  // 二次处理请求的opts中的参数\n  const {type} = opts,\n    [requestType, successType, failureType] = opts.types;\n\n  opts.type = type ? type : 'GET';\n\n  /**\n   * 触发action\n   * @param {Object} _action\n   * @returns {*}\n   */\n  function actionWith(_action) {\n    _action = Object.assign(action, _action);\n\n    //'wait' 'fetching' 'success' 'fail'\n    let obj = {\n      [STATUS]: 'fetching',\n    };\n\n    switch (_action.type) {\n      case successType:\n        obj[STATUS] = 'success';\n        break;\n      case failureType:\n        obj[STATUS] = 'fail';\n        break;\n      default:\n        break;\n    }\n\n    if (obj[STATUS] !== 'fetching') {\n      _action.data = Object.assign(_action.data || {}, obj);\n    } else {\n      _action.data = {};\n    }\n\n    const finalAction = _action;\n\n    delete finalAction[CALL_API];\n\n    return finalAction;\n  }\n\n  // 在请求发送之前，首先会触发 request 的action，表示要发送请求了\n  let data = Object.assign({}, opts.data);\n\n  next(\n    actionWith({\n      type: requestType,\n      data,\n    }),\n  );\n\n  // 开发模式下需要先写定固定端口号，因为默认启动的时3000端口\n  let requestURL = opts.url;\n  if (process.env.NODE_ENV !== 'production') {\n    requestURL = 'http://127.0.0.1:9527' + requestURL;\n  }\n\n  // 发送 ajax 请求\n  return request(opts.type, requestURL)\n    .send(opts.data)\n    .then(res => {\n      return res.body || {};\n    })\n    .then(resData => {\n      let finalAction = actionWith({\n        type: successType,\n        data: resData,\n      });\n\n      next(finalAction);\n\n      if (typeof opts._onSuccess === 'function') {\n        opts._onSuccess(resData, next);\n      }\n\n      return finalAction;\n    })\n    .catch(err => {\n      // ios8下面 stack会存在\n      if (err && err.stack && !err.errno) {\n        // error\n        setTimeout(function () {\n          throw err;\n        }, 0);\n      } else {\n        let finalAction = actionWith({\n          type: failureType,\n          error: err,\n        });\n\n        next(finalAction);\n\n        if (typeof opts._onFail === 'function') {\n          opts._onFail(err, next);\n        }\n\n        return Promise.reject(finalAction);\n      }\n    });\n};\n","import _ from 'lodash';\n\nexport function getLocalServerConfig() {\n  const config = _.merge(\n    {\n      namespace: '',\n      adminSiteRouteName: 'mockstar-admin',\n      adminCGIRouteName: 'mockstar-cgi',\n    },\n    window._mockstar_config_,\n  );\n\n  window._mockstar_config_ = config;\n\n  return config;\n}\n\nexport function getSiteRoot() {\n  let {namespace} = getLocalServerConfig();\n\n  return namespace ? `/${namespace}/` : '/';\n}\n\nexport function getSiteBase() {\n  let {adminSiteRouteName} = getLocalServerConfig();\n\n  return getSiteRoot() + adminSiteRouteName;\n}\n\nexport function getCGIBase() {\n  let {adminCGIRouteName} = getLocalServerConfig();\n\n  return getSiteRoot() + adminCGIRouteName;\n}\n\nexport function getPort() {\n  let {port} = getLocalServerConfig();\n\n  return port;\n}\n\nexport function getNamespace() {\n  let {namespace} = getLocalServerConfig();\n\n  return namespace;\n}\n","import {CALL_API} from '../../../../middlewares/api';\nimport {getCGIBase} from '../../../../custom';\n\nexport const MOCKER_REQUEST = 'MOCKER_REQUEST';\nexport const MOCKER_REQUEST_SUCCESS = 'MOCKER_REQUEST_SUCCESS';\nexport const MOCKER_REQUEST_FAIL = 'MOCKER_REQUEST_FAIL';\n\nexport const MOCKER_README_REQUEST = 'MOCKER_README_REQUEST';\nexport const MOCKER_README_REQUEST_SUCCESS = 'MOCKER_README_REQUEST_SUCCESS';\nexport const MOCKER_README_REQUEST_FAIL = 'MOCKER_README_REQUEST_FAIL';\n\nexport const SET_ACTIVE_MODULE_REQUEST = 'SET_ACTIVE_MODULE_REQUEST';\nexport const SET_ACTIVE_MODULE_REQUEST_SUCCESS = 'SET_ACTIVE_MODULE_REQUEST_SUCCESS';\nexport const SET_ACTIVE_MODULE_REQUEST_FAIL = 'SET_ACTIVE_MODULE_REQUEST_FAIL';\n\nfunction fetchMocker(mockerName) {\n  return {\n    [CALL_API]: {\n      types: [MOCKER_REQUEST, MOCKER_REQUEST_SUCCESS, MOCKER_REQUEST_FAIL],\n      url: `${getCGIBase()}/mocker/${mockerName}`,\n    },\n  };\n}\n\nexport function loadMocker(mockerName) {\n  return (dispatch, getState) => {\n    return dispatch(fetchMocker(mockerName));\n  };\n}\n\nfunction fetchMockerReadme(mockerName) {\n  return {\n    [CALL_API]: {\n      types: [MOCKER_README_REQUEST, MOCKER_README_REQUEST_SUCCESS, MOCKER_README_REQUEST_FAIL],\n      url: `${getCGIBase()}/mocker/${mockerName}/readme`,\n    },\n  };\n}\n\nexport function loadMockerReadme(mockerName) {\n  return (dispatch, getState) => {\n    return dispatch(fetchMockerReadme(mockerName));\n  };\n}\n\nfunction requestUpdateMocker(mockerName, newMockerState) {\n  return {\n    [CALL_API]: {\n      types: [\n        SET_ACTIVE_MODULE_REQUEST,\n        SET_ACTIVE_MODULE_REQUEST_SUCCESS,\n        SET_ACTIVE_MODULE_REQUEST_FAIL,\n      ],\n      url: `${getCGIBase()}/mocker/${mockerName}`,\n      type: 'POST',\n      data: newMockerState,\n    },\n  };\n}\n\nexport function setMockerActiveModule(mockerName, mockModuleName) {\n  return (dispatch, getState) => {\n    return dispatch(\n      requestUpdateMocker(mockerName, {\n        config: {\n          activeModule: mockModuleName,\n        },\n      }),\n    );\n  };\n}\n\nexport function setMockerDisable(mockerName, value) {\n  return (dispatch, getState) => {\n    return dispatch(\n      requestUpdateMocker(mockerName, {\n        config: {\n          disable: value,\n        },\n      }),\n    );\n  };\n}\n","import _ from 'lodash';\n\nimport {\n  MOCKER_README_REQUEST_SUCCESS,\n  MOCKER_REQUEST,\n  MOCKER_REQUEST_FAIL,\n  MOCKER_REQUEST_SUCCESS,\n  SET_ACTIVE_MODULE_REQUEST_SUCCESS,\n} from './action';\n\nconst initialState = {\n  isLoaded: false,\n  data: {},\n  readme: '',\n};\n\nfunction mockerInfo(state = initialState, action) {\n  let {type, data} = action,\n    update = {};\n\n  switch (type) {\n    case MOCKER_REQUEST:\n      update = {\n        isLoaded: false,\n      };\n      break;\n    case MOCKER_REQUEST_SUCCESS:\n      update = {\n        isLoaded: true,\n        data: _.merge({}, data, {\n          modules: (data.modules || []).sort((a, b) => {\n            return b.priority - a.priority;\n          }),\n        }),\n      };\n      break;\n    case MOCKER_REQUEST_FAIL:\n      update = {\n        isLoaded: true,\n      };\n      break;\n\n    case MOCKER_README_REQUEST_SUCCESS:\n      update = {\n        readme: data.html,\n      };\n      break;\n\n    case SET_ACTIVE_MODULE_REQUEST_SUCCESS:\n      update.data = _.merge({}, state.data, data);\n      break;\n\n    default:\n      break;\n  }\n\n  return Object.keys(update).length ? Object.assign({}, state, update) : state;\n}\n\nexport default mockerInfo;\n","import reducer from './reducer';\n\nexport {\n  loadMocker,\n  loadMockerReadme,\n  setMockerActiveModule,\n  setMockerDisable,\n  SET_ACTIVE_MODULE_REQUEST_SUCCESS,\n} from './action';\n\nexport const mockerInfo = reducer;\n","import {CALL_API} from '../../../../middlewares/api';\nimport {getCGIBase} from '../../../../custom';\n\nexport const MOCKER_LIST_REQUEST = 'MOCKER_LIST_REQUEST';\nexport const MOCKER_LIST_REQUEST_SUCCESS = 'MOCKER_LIST_REQUEST_SUCCESS';\nexport const MOCKER_LIST_REQUEST_FAIL = 'MOCKER_LIST_REQUEST_FAIL';\n\nfunction fetchMockerList() {\n  return {\n    [CALL_API]: {\n      types: [MOCKER_LIST_REQUEST, MOCKER_LIST_REQUEST_SUCCESS, MOCKER_LIST_REQUEST_FAIL],\n      url: `${getCGIBase()}/mocker`,\n    },\n  };\n}\n\nexport function loadMockerList() {\n  return (dispatch, getState) => {\n    return dispatch(fetchMockerList());\n  };\n}\n","import _ from 'lodash';\n\nimport {MOCKER_LIST_REQUEST_FAIL, MOCKER_LIST_REQUEST_SUCCESS} from './action';\n\nimport {SET_ACTIVE_MODULE_REQUEST_SUCCESS} from '../data-mocker';\n\nconst initialState = {\n  isLoaded: false,\n  list: [],\n};\n\nfunction mockerListInfo(state = initialState, action) {\n  let {type, data} = action,\n    update = {};\n\n  switch (type) {\n    case MOCKER_LIST_REQUEST_SUCCESS:\n      update = {\n        isLoaded: true,\n        list: (data || []).sort((a, b) => {\n          return b.priority - a.priority;\n        }),\n      };\n      break;\n    case MOCKER_LIST_REQUEST_FAIL:\n      update = {\n        isLoaded: true,\n      };\n      break;\n\n    case SET_ACTIVE_MODULE_REQUEST_SUCCESS:\n      update.list = state.list.map(item => {\n        if (item.name === data.name) {\n          item = _.merge({}, item, data);\n        }\n        return item;\n      });\n      break;\n\n    default:\n      break;\n  }\n\n  return Object.keys(update).length ? Object.assign({}, state, update) : state;\n}\n\nexport default mockerListInfo;\n","import reducer from './reducer';\n\nexport {loadMockerList} from './action';\n\nexport const mockerListInfo = reducer;\n","import {CALL_API} from '../../middlewares/api';\nimport {getCGIBase} from '../../custom';\n\nexport const DETAIL_REQUEST = 'DETAIL_REQUEST';\nexport const DETAIL_REQUEST_SUCCESS = 'DETAIL_REQUEST_SUCCESS';\nexport const DETAIL_REQUEST_FAIL = 'DETAIL_REQUEST_FAIL';\n\nfunction fetchDetail() {\n  return {\n    [CALL_API]: {\n      types: [DETAIL_REQUEST, DETAIL_REQUEST_SUCCESS, DETAIL_REQUEST_FAIL],\n      url: `${getCGIBase()}/detail`,\n    },\n  };\n}\n\nexport function loadDetail() {\n  return (dispatch, getState) => {\n    return dispatch(fetchDetail());\n  };\n}\n","import {DETAIL_REQUEST, DETAIL_REQUEST_FAIL, DETAIL_REQUEST_SUCCESS} from './action';\nimport _ from 'lodash';\n\nconst initialState = {\n  isLoaded: false,\n  config: {},\n};\n\nexport default function detailInfo(state = initialState, action) {\n  let {type, data} = action,\n    update = {};\n\n  switch (type) {\n    case DETAIL_REQUEST:\n      update = {\n        isLoaded: false,\n      };\n      break;\n\n    case DETAIL_REQUEST_SUCCESS:\n      update = _.merge(\n        {\n          isLoaded: true,\n        },\n        state,\n        data,\n      );\n      break;\n\n    case DETAIL_REQUEST_FAIL:\n      update = {\n        isLoaded: true,\n      };\n      break;\n\n    default:\n      break;\n  }\n\n  return Object.keys(update).length ? Object.assign({}, state, update) : state;\n}\n","import reducer from './reducer';\n\nexport {loadDetail} from './action';\n\nexport const detailInfo = reducer;\n","import {combineReducers} from 'redux';\n\nimport {mockerInfo} from '../pages/mockers/data/data-mocker';\nimport {mockerListInfo} from '../pages/mockers/data/data-mocker-list';\nimport {detailInfo} from '../datas/data-detail';\n\nconst rootReducer = combineReducers({\n  mockerInfo: mockerInfo,\n  mockerListInfo: mockerListInfo,\n  detailInfo: detailInfo,\n});\n\nexport default rootReducer;\n","import {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\n\nimport api from '../middlewares/api';\nimport rootReducer from '../reducers';\n\nconst configureStore = preloadedState =>\n  createStore(rootReducer, preloadedState, applyMiddleware(thunk, api));\n\nexport default configureStore;\n","import React, { Component } from 'react';\nimport { Layout, Menu } from 'antd';\nimport { NavLink } from 'react-router-dom';\n\nimport { getSiteBase, getSiteRoot } from '../../custom';\n\nimport './index.less';\n\nclass LayoutHeader extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      activeMenu: '',\n      isInit: false,\n    };\n  }\n\n  handleIsActive = curMenu => {\n    if (!curMenu) {\n      return;\n    }\n    // console.log('---handleIsActive---', curMenu);\n\n    const map = {\n      [getSiteRoot()]: 'home',\n      [`${getSiteBase()}/dashboard`]: 'home',\n      [`${getSiteBase()}/mockers`]: 'mockers',\n      [`${getSiteBase()}/debug`]: 'debug',\n    };\n\n    let newMenuId = map[curMenu.url];\n\n    if (newMenuId && newMenuId !== this.state.activeMenu) {\n      setTimeout(() => {\n        this.setState({\n          activeMenu: newMenuId,\n          isInit: true,\n        });\n      }, 0);\n    }\n  };\n\n  render() {\n    let { activeMenu } = this.state;\n\n    // 如果被嵌套在 iframe 中，则不展示导航\n    if (window.self !== window.top) {\n      return null;\n    }\n\n    return (\n      <Layout.Header className=\"layout-header header\">\n        <Menu\n          theme=\"dark\"\n          mode=\"horizontal\"\n          selectedKeys={[activeMenu]}\n          style={{ lineHeight: '64px' }}>\n          <Menu.Item key=\"home\">\n            <NavLink to={`${getSiteBase()}/dashboard`} isActive={this.handleIsActive}>\n              首页\n            </NavLink>\n          </Menu.Item>\n\n          <Menu.Item key=\"mockers\">\n            <NavLink to={`${getSiteBase()}/mockers`} isActive={this.handleIsActive}>\n              数据模拟\n            </NavLink>\n          </Menu.Item>\n\n          {/*<Menu.Item key=\"debug\">*/}\n          {/*  <NavLink to={`${getSiteBase()}/debug`} isActive={this.handleIsActive}>*/}\n          {/*    debug*/}\n          {/*  </NavLink>*/}\n          {/*</Menu.Item>*/}\n        </Menu>\n      </Layout.Header>\n    );\n  }\n}\n\nexport default LayoutHeader;\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport {getPort, getSiteRoot} from '../../../../custom';\n\nimport './index.less';\n\nclass ProxyInfo extends Component {\n  render() {\n    const {localServerConfig} = this.props;\n\n    // hostname 应该与页面一致\n    const hostname = window.location.hostname;\n\n    // 如果是本地服务，则需要更换端口号为服务端返回的端口号。\n    // 例如本地调试的页面是 127.0.0.1:3000 而 mock server 是 127.0.0.1:9527\n    const port =\n      hostname === 'localhost' || hostname === '127.0.0.1'\n        ? localServerConfig.port\n        : window.location.port;\n\n    let mockStarHost = hostname + (port ? `:${port}` : '') + getSiteRoot().slice(0, -1);\n\n    return (\n      <div className=\"proxy-info\">\n        <h2>代理设置</h2>\n\n        <blockquote>\n          强烈推荐使用{' '}\n          <a href=\"https://avwo.github.io/whistle/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            whistle\n          </a>{' '}\n          来做代理服务器。\n        </blockquote>\n        <p>\n          假设真实的CGI请求为 <code>http://youdomain.com/cgi-bin/a/b/demo_01</code>\n          ，则请设置代理如下：\n        </p>\n\n        <pre>\n          <code>\n            <p>youdomain.com {mockStarHost}</p>\n            <p> </p>\n            <p># 或者</p>\n            <p>youdomain.com/cgi-bin/a/b/demo_01 {mockStarHost}</p>\n            <p> </p>\n            <p># 或者</p>\n            <p>youdomain.com/cgi-bin {mockStarHost}</p>\n          </code>\n        </pre>\n\n        {getSiteRoot().length > 1 ? (\n          <div>\n            注意，由于您启用了 <code>namespace</code> 参数，因此，需要在 nginx\n            的配置中增加如下配置，否则代理将无法生效！\n            <pre>\n              <code>\n                <p>\n                  location ^~ {getSiteRoot()} {'{'}\n                </p>\n                <p> rewrite {getSiteRoot()}(.*) /$1 break;</p>\n                <p> proxy_pass http://127.0.0.1:{getPort()}/;</p>\n                <p>{'}'}</p>\n              </code>\n            </pre>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const {detailInfo} = state;\n\n  return {\n    localServerConfig: detailInfo.config,\n  };\n}\n\nexport default connect(mapStateToProps)(ProxyInfo);\n","import React, {Component} from 'react';\n\nimport ProxyInfo from './components/proxy-info';\n\nimport './index.less';\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div className=\"page-home text-content\">\n        <h2>HOME</h2>\n        <p>\n          欢迎使用{' '}\n          <a href=\"https://github.com/mockstarjs/mockstar\" target=\"_blank\" rel=\"noopener noreferrer\">\n            mockstar\n          </a>\n          ，欢迎给我们提{' '}\n          <a href=\"https://github.com/mockstarjs/mockstar/issues\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Issues\n          </a>\n          ！\n        </p>\n\n        <ProxyInfo />\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport { Alert, Button, Card, Radio } from 'antd';\nimport { NavLink } from 'react-router-dom';\n\nimport './index.less';\n\nexport default function MockerListItem(props) {\n  const { mockerItem, mockersPath, curTag, index, clickTag, setActive, setDisable } = props;\n  const mockerItemConfig = mockerItem.config;\n\n  const isDisabled = mockerItemConfig.disable;\n\n  return (\n    <Card\n      className=\"mocker-list-item\"\n      title={`${index + 1}. ${mockerItem.name}`}\n      extra={\n        <div className=\"card-action\">\n          <Button\n            type={isDisabled ? 'primary' : 'default'}\n            icon=\"setting\"\n            className=\"set-disable-btn\"\n            onClick={setDisable.bind(this, mockerItem.name, isDisabled)}>\n            {isDisabled ? '启用' : '禁用'}\n          </Button>\n\n          <NavLink to={`${mockersPath}/${mockerItem.name}`}>更多...</NavLink>\n        </div>\n      }>\n      <div className={mockerItemConfig.plugin + ' ' + mockerItemConfig.method} />\n\n      <div className=\"detail\">\n        <Alert message={mockerItemConfig.description} type=\"info\" showIcon />\n      </div>\n\n      <p>点击标签进行过滤：</p>\n      <Radio.Group value={curTag} onChange={(e) => {\n        clickTag(e.target.value);\n      }}>\n        {\n          mockerItemConfig.tags.map((tagName, tagIndex) => {\n            return (\n              <Radio.Button value={tagName} key={tagIndex}>{tagName}</Radio.Button>\n            );\n          })\n        }\n      </Radio.Group>\n\n      <br />\n      <br />\n\n      <p>请选择需要激活的模块：</p>\n      <Radio.Group\n        value={mockerItemConfig.activeModule}\n        disabled={isDisabled ? 'disable' : ''}\n        onChange={(e) => {\n          setActive(mockerItem.name, e.target.value);\n        }}\n      >\n        {\n          mockerItem.mockModuleList.map((item, index) => {\n            return (\n              <Radio.Button value={item.name} key={index}>{item.name}</Radio.Button>\n            );\n          })\n        }\n      </Radio.Group>\n    </Card>\n  );\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\n\nimport { Col, Radio, Row } from 'antd';\n\nimport { loadMockerList } from '../../data/data-mocker-list';\nimport ListItem from './list-item';\n\nimport './index.less';\nimport { setMockerActiveModule, setMockerDisable } from '../../data/data-mocker';\n\nclass MockersList extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      curTag: '全部',\n    };\n  }\n\n  componentDidMount() {\n    this.props.loadMockerList();\n  }\n\n  getAllTags() {\n    const { list } = this.props;\n\n    let arr = [];\n\n    list.forEach(item => {\n      arr = arr.concat(item.config.tags);\n    });\n\n    return _.uniq(arr);\n  }\n\n  getFilterList() {\n    const { curTag } = this.state;\n    const { list } = this.props;\n\n    return list.filter(item => item.config.tags.indexOf(curTag) > -1);\n  }\n\n  handleClickTag = tagName => {\n    this.setState({\n      curTag: tagName,\n    });\n  };\n\n  handleSelectTagChange = e => {\n    this.setState({\n      curTag: e.target.value\n    });\n  };\n\n  handleActive = (mockerName, mockModuleName) => {\n    this.props.setMockerActiveModule(mockerName, mockModuleName);\n  };\n\n  handleDisable = (mockerName, curIsDisabled) => {\n    this.props.setMockerDisable(mockerName, !curIsDisabled);\n  };\n\n  getResultToRenderList(filterList) {\n    let length = filterList.length;\n    let groupChildLength = 3;\n    let groupLength =\n      length % groupChildLength !== 0\n        ? parseInt(length / groupChildLength, 10) + 1\n        : parseInt(length / groupChildLength, 10);\n\n    let result = [];\n\n    for (let i = 0; i < groupLength; i++) {\n      let arr = [];\n\n      for (let j = i * groupChildLength; j < (i + 1) * groupChildLength && j < length; j++) {\n        // console.log('=====', i, j, filterList[j].name);\n        arr.push(filterList[j]);\n      }\n\n      result.push(arr);\n    }\n\n    return result;\n  }\n\n  render() {\n    const { match } = this.props;\n    const { curTag } = this.state;\n\n    const tagList = this.getAllTags();\n    const filterList = this.getFilterList();\n\n    const list = this.getResultToRenderList(filterList);\n\n    return (\n      <div className=\"mockers\">\n        <div className=\"tag-wrapper\">\n          <Radio.Group value={curTag} onChange={this.handleSelectTagChange}>\n            {\n              tagList.map((tagName, tagIndex) => {\n                return (\n                  <Radio.Button value={tagName} key={tagIndex}>{tagName}</Radio.Button>\n                );\n              })\n            }\n          </Radio.Group>\n        </div>\n\n        <div className=\"list-wrapper\">\n          {list.map((subList, subListIndex) => {\n            return (\n              <Row gutter={16} key={subListIndex}>\n                {subList.map((item, index) => {\n                  return (\n                    <Col span={8} key={index}>\n                      <ListItem\n                        index={subListIndex * 3 + index}\n                        curTag={curTag}\n                        mockerItem={item}\n                        mockersPath={match.url}\n                        clickTag={this.handleClickTag}\n                        setActive={this.handleActive}\n                        setDisable={this.handleDisable}\n                      />\n                    </Col>\n                  );\n                })}\n              </Row>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { mockerListInfo } = state;\n\n  return {\n    isLoaded: mockerListInfo.isLoaded,\n    list: mockerListInfo.list,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    loadMockerList() {\n      return dispatch(loadMockerList());\n    },\n\n    setMockerActiveModule(mockerName, mockModuleName) {\n      return dispatch(setMockerActiveModule(mockerName, mockModuleName));\n    },\n\n    setMockerDisable(mockerName, value) {\n      return dispatch(setMockerDisable(mockerName, value));\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MockersList);\n","import superagent from 'superagent';\n\nexport function ajax(opts = {}) {\n  // 当请求为POST类型时，预览结果时报错 #40\n  // query 为 null 的时候，需手动换为 undefined\n  const queryOpts = opts.data ? opts.data : undefined;\n\n  if (opts.method === 'post') {\n    return getDataByPost(opts.url, queryOpts);\n  } else {\n    return getDataByGet(opts.url, queryOpts);\n  }\n}\n\nexport function getDataByPost(url, queryOpts) {\n  return new Promise((resolve, reject) => {\n    superagent\n      .post(url)\n      .set('Content-Type', 'application/json')\n      .send(queryOpts)\n      // .withCredentials()\n      .end((err, res) => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(res.body);\n      });\n  });\n}\n\nexport function getDataByGet(url, queryOpts) {\n  return new Promise((resolve, reject) => {\n    superagent\n      .get(url)\n      .query(queryOpts)\n      // .withCredentials()\n      .end((err, res) => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(res.body);\n      });\n  });\n}\n","import React from 'react';\n\nimport {Breadcrumb} from 'antd';\nimport {NavLink} from 'react-router-dom';\n\nimport './index.less';\n\nexport default function MockerSwitcher(props) {\n  const {name, match} = props;\n\n  let arr = match.url.split('/');\n  arr.pop();\n\n  const parentPath = arr.join('/');\n\n  return (\n    <div className=\"mocker-breadcrumb\">\n      <Breadcrumb>\n        <Breadcrumb.Item>\n          <NavLink to={parentPath}> 列表 </NavLink>\n        </Breadcrumb.Item>\n\n        <Breadcrumb.Item>{name}</Breadcrumb.Item>\n      </Breadcrumb>\n    </div>\n  );\n}\n","import React from 'react';\nimport {Card, Col, Row} from 'antd';\n\nimport './index.less';\n\nexport default function MockerDetail(props) {\n  const {mockerItem} = props;\n\n  // 获得当前激活状态的那个 mock module\n  let mockModuleItem = (mockerItem.mockModuleList || []).filter(item => {\n    return item.name === mockerItem.config.activeModule;\n  })[0];\n\n  if (!mockModuleItem) {\n    return null;\n  }\n\n  return (\n    <Card className=\"mocker-detail\">\n      <div className={mockerItem.config.plugin + ' ' + mockerItem.config.method} />\n      <Row>\n        <Col span={12}>\n          <h2>{mockerItem.name}</h2>\n          <p>{mockerItem.config.description}</p>\n          <p>\n            {mockerItem.config.version ? `v${mockerItem.config.version}` : ''}\n            {mockerItem.config.author ? ` by ${mockerItem.config.author}` : ''}\n          </p>\n        </Col>\n\n        <Col span={12}>\n          <table>\n            <tbody>\n              <tr>\n                <td>数据类型:</td>\n                <td>{mockerItem.config.plugin}</td>\n              </tr>\n              <tr>\n                <td style={{width: '100px'}}>配置的路由:</td>\n                <td>{mockerItem.config.route}</td>\n              </tr>\n              <tr>\n                <td>已激活数据:</td>\n                <td>{mockerItem.config.activeModule}</td>\n              </tr>\n            </tbody>\n          </table>\n        </Col>\n      </Row>\n    </Card>\n  );\n}\n","import React, {Component} from 'react';\nimport {Button, Modal} from 'antd';\n\nimport './index.less';\n\nexport default class MockerShowResult extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      showData: '',\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.data !== nextProps.data) {\n      this.setState({\n        showData: JSON.stringify(nextProps.data, null, 2),\n      });\n    }\n  }\n\n  handleOnChange = event => {\n    this.setState({\n      showData: event.target.value,\n    });\n  };\n\n  render() {\n    const {data, mockerItem, onHide, onEmitPush} = this.props;\n    const {showData} = this.state;\n\n    const isShow = !!data;\n    const isShowEmitButton = mockerItem.config.plugin === 'async';\n\n    return (\n      <div className=\"mocker-show-result\">\n        <Modal\n          title=\"结果\"\n          visible={isShow}\n          onCancel={onHide}\n          onOk={onHide}\n          footer={[\n            isShowEmitButton ? (\n              <Button\n                key=\"push\"\n                type=\"primary\"\n                size=\"large\"\n                onClick={onEmitPush.bind(this, showData)}>\n                主动推送\n              </Button>\n            ) : null,\n            <Button key=\"cancel\" type=\"primary\" size=\"large\" onClick={onHide}>\n              知道了\n            </Button>,\n          ]}>\n          <textarea\n            name=\"cgidata\"\n            id=\"cgidata\"\n            style={{width: '100%', minHeight: '600px'}}\n            value={showData}\n            onChange={this.handleOnChange}\n          />\n        </Modal>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport {Alert, Button} from 'antd';\n\nimport './index.less';\n\nexport default function MockerSwitcher(props) {\n  const {isDisabled, activeModule, previewResult, updateDisable} = props;\n\n  return (\n    <div className=\"mocker-action\">\n      {isDisabled ? (\n        <Alert\n          message=\"当前 mock 服务已被禁用，您可请点击“启用”按钮开始 mock 服务！\"\n          type=\"warning\"\n          showIcon\n        />\n      ) : (\n        <Alert message=\"mock 服务已开始生效！\" type=\"success\" showIcon />\n      )}\n\n      <Button\n        type=\"primary\"\n        disabled={isDisabled ? 'disable' : ''}\n        icon=\"profile\"\n        onClick={previewResult}>\n        预览结果 【 {activeModule} 】\n      </Button>\n\n      <Button type={isDisabled ? 'primary' : 'default'} icon=\"setting\" onClick={updateDisable}>\n        {isDisabled ? '启用' : '禁用'} mock 服务\n      </Button>\n    </div>\n  );\n}\n","import React from 'react';\nimport {Card} from 'antd';\n\nimport './index.less';\n\nexport default function MockerProxyInfo(props) {\n  const {isDisabled, mockerItem, mockServerHost} = props;\n\n  // 非 xhr 场景无需设置代理\n  if (mockerItem.config.plugin !== 'xhr') {\n    return null;\n  }\n\n  if (isDisabled) {\n    return null;\n  }\n\n  return (\n    <Card className=\"mocker-proxy-info\">\n      <p>\n        whistle 代理设置：{' '}\n        <code>\n          /(.*){mockerItem.config.route}(.*)/ {mockServerHost}\n        </code>\n      </p>\n    </Card>\n  );\n}\n","import React from 'react';\nimport {Button, Table} from 'antd';\n\nimport './index.less';\n\nexport default function MockerMockModuleList(props) {\n  const {isLoaded, mockerItem, previewResult, updateActive} = props;\n\n  const activeModule = mockerItem.config.activeModule || '';\n  const mockModuleList = mockerItem.mockModuleList || [];\n\n  const tableColumns = [\n    {\n      title: '数据模型名称',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: '描述',\n      dataIndex: 'description',\n      key: 'description',\n      render: (text, record) => (\n        <div>\n          {record.config.version ? 'V' + record.config.version : ''}\n          {record.config.author ? ' by' + record.config.author : ''}\n          {record.config.description}\n        </div>\n      ),\n    },\n    {\n      title: '操作',\n      key: 'action',\n      render: (text, record) => (\n        <div>\n          <Button\n            type=\"primary\"\n            disabled={mockerItem.config.disable ? 'disable' : ''}\n            onClick={previewResult.bind(this, record.config.match)}>\n            预览结果\n          </Button>\n\n          <span className=\"ant-divider\" />\n\n          {record.name !== activeModule ? (\n            <Button\n              type=\"primary\"\n              disabled={mockerItem.config.disable ? 'disable' : ''}\n              onClick={updateActive.bind(this, record.name)}>\n              激活\n            </Button>\n          ) : (\n            <Button type=\"primary\" disabled={'disable'}>\n              已激活\n            </Button>\n          )}\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <div className=\"mock-module-list\">\n      <Table loading={!isLoaded} rowKey=\"name\" columns={tableColumns} dataSource={mockModuleList} />\n    </div>\n  );\n}\n","import React from 'react';\nimport {Card} from 'antd';\n\nimport './index.less';\n\nexport default function MockerReadme(props) {\n  const {htmlContent} = props;\n\n  if (!htmlContent) {\n    return null;\n  }\n\n  return (\n    <div className=\"mocker-readme\">\n      <Card title=\"使用说明\">\n        <div\n          className=\"readme-content text-content\"\n          dangerouslySetInnerHTML={{__html: htmlContent}}\n        />\n      </Card>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { Menu } from 'antd';\nimport { withRouter } from 'react-router-dom';\n\nimport './index.less';\n\nclass MockerMenu extends Component {\n  handleClick = ({ item, key }) => {\n    if (this.props.match.params.mockerName !== key) {\n      this.props.history.push(this.props.match.path.replace(/:mockerName/gi, key));\n\n      // 通知右侧重新刷新\n      this.props.refresh(key);\n    }\n  };\n\n  render() {\n    let { mockerListInfo, match } = this.props;\n    if (!mockerListInfo.isLoaded) {\n      return null;\n    }\n\n    let { mockerName } = match.params;\n\n    return (\n      <div className=\"mocker-menu\">\n        <Menu\n          defaultSelectedKeys={[mockerName]}\n          selectedKeys={[mockerName]}\n          // style={{ width: '300px' }}\n          onClick={this.handleClick}>\n          {mockerListInfo.list.map(item => {\n            return (\n              <Menu.Item key={item.name} className={item.config.plugin + ' ' + item.config.method}>\n                {item.name}\n              </Menu.Item>\n            );\n          })}\n        </Menu>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(MockerMenu);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Layout } from 'antd';\n\nimport { AsyncClient } from 'mockstar-client';\n\nimport { ajax } from '../../../../business/db';\n\nimport {\n  loadMocker,\n  loadMockerReadme,\n  setMockerActiveModule,\n  setMockerDisable,\n} from '../../data/data-mocker';\nimport { loadMockerList } from '../../data/data-mocker-list';\n\nimport MockerBreadcrumb from './display-breadcrumb';\nimport MockerDetail from './display-detail';\nimport MockerShowResult from './display-show-result';\nimport MockerSwitcher from './display-action';\nimport MockerProxyTips from './display-proxy-tips';\nimport MockModuleList from './display-mock-module-list';\nimport MockerReadme from './display-readme';\nimport MockerMenu from './display-menu';\n\nimport { getNamespace } from '../../../../custom';\n\nimport './index.less';\n\nclass Mocker extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      modalShowData: null,\n    };\n  }\n\n  componentDidMount() {\n    console.log('Mocker componentDidMount', this.props);\n\n    let { mockerName } = this.props.match.params;\n\n    // 加载这个 mocker 的信息\n    this.props.loadMocker(mockerName);\n    this.props.loadMockerReadme(mockerName);\n\n    // 加载所有的 mocker，主要是为了菜单展示\n    this.props.loadMockerList();\n  }\n\n  getMockServerHost() {\n    const { localServerConfig } = this.props;\n\n    // hostname 应该与页面一致\n    const hostname = window.location.hostname;\n\n    // 如果是本地服务，则需要更换端口号为服务端返回的端口号。\n    // 例如本地调试的页面是 127.0.0.1:3000 而 mock server 是 127.0.0.1:9527\n    const port =\n      hostname === 'localhost' || hostname === '127.0.0.1'\n        ? localServerConfig.port\n        : window.location.port;\n\n    // 有端口的时候一定要记得设置端口\n    return hostname + (port ? `:${port}` : '');\n  }\n\n  handlePreviewResult = query => {\n    const { mockerItem } = this.props;\n\n    let actualURL = mockerItem.config.route;\n\n    // 获得 host\n    let host = this.getMockServerHost();\n\n    if (mockerItem.config.plugin !== 'async') {\n      // 如果有指定的host，则使用指定的host\n      if (host && actualURL.indexOf(host) < 0) {\n        let namespace = getNamespace();\n        let url = actualURL.indexOf('/') === 0 ? actualURL : '/' + actualURL;\n        let fullPath = (namespace ? `/${namespace}` : '') + url;\n        actualURL = `http://${host}${fullPath}`;\n      }\n\n      ajax({\n        method: mockerItem.config.method,\n        url: actualURL,\n        data: query,\n      })\n        .then(data => {\n          if (process.env.NODE_ENV !== 'production') {\n            console.log(`url=${actualURL}`, query, data);\n          }\n\n          this.handleModalShow(data);\n        })\n        .catch(err => {\n          console.error(err);\n        });\n    } else {\n      let asyncClient = new AsyncClient(`http://${host}`);\n\n      asyncClient\n        .request(actualURL, query)\n        .then(data => {\n          if (process.env.NODE_ENV !== 'production') {\n            console.log(`url=${actualURL}`, query, data);\n          }\n\n          this.handleModalShow(data);\n        })\n        .catch(err => {\n          console.error(err);\n        });\n    }\n  };\n\n  handleActive = name => {\n    this.props.setMockerActiveModule(this.props.mockerItem.name, name);\n  };\n\n  handleModalShow = data => {\n    this.setState({\n      modalShowData: data,\n    });\n  };\n\n  handleModalHide = () => {\n    this.setState({\n      modalShowData: null,\n    });\n  };\n\n  handleModalEmitPush = data => {\n    console.log('--push---', data);\n    const { mockerItem } = this.props;\n\n    // 获得 host\n    let host = this.getMockServerHost();\n\n    let asyncClient = new AsyncClient(`http://${host}`);\n\n    asyncClient.emit('emitStub', {\n      route: mockerItem.config.route,\n      name: mockerItem.config.name,\n      activeModule: mockerItem.config.activeModule,\n      result: data,\n    });\n  };\n\n  handleDisable = () => {\n    this.props.setMockerDisable(this.props.mockerItem.name, !this.props.mockerItem.config.disable);\n  };\n\n  handleRefresh = mockerName => {\n    // 加载这个 mocker 的信息\n    this.props.loadMocker(mockerName);\n    this.props.loadMockerReadme(mockerName);\n  };\n\n  render() {\n    const { isLoaded, mockerItem, readme, match, mockerListInfo } = this.props;\n    const { modalShowData } = this.state;\n    const mockServerHost = this.getMockServerHost();\n\n    return (\n      <Layout className=\"mockers-mocker\">\n        <Layout.Sider className=\"mocker-sider\" width=\"300\">\n          <MockerMenu mockerListInfo={mockerListInfo} match={match} refresh={this.handleRefresh} />\n        </Layout.Sider>\n\n        <Layout className=\"mocker-content\">\n          <MockerBreadcrumb name={mockerItem.name} match={match} />\n\n          {isLoaded ? (\n            <div>\n              <MockerSwitcher\n                isDisabled={mockerItem.config.disable}\n                activeModule={mockerItem.config.activeModule}\n                previewResult={this.handlePreviewResult.bind(this, null)}\n                updateDisable={this.handleDisable}\n              />\n\n              <MockerProxyTips\n                isDisabled={mockerItem.config.disable}\n                mockerItem={mockerItem}\n                mockServerHost={mockServerHost}\n              />\n\n              <MockerDetail mockerItem={mockerItem} />\n\n              <MockModuleList\n                isLoaded={isLoaded}\n                mockerItem={mockerItem}\n                previewResult={this.handlePreviewResult}\n                updateActive={this.handleActive}\n              />\n\n              <MockerShowResult\n                data={modalShowData}\n                mockerItem={mockerItem}\n                onHide={this.handleModalHide}\n                onEmitPush={this.handleModalEmitPush}\n              />\n\n              <MockerReadme htmlContent={readme} />\n            </div>\n          ) : (\n            <div>加载中...</div>\n          )}\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { mockerInfo, mockerListInfo, detailInfo } = state;\n\n  return {\n    isLoaded: mockerInfo.isLoaded,\n    mockerItem: mockerInfo.data,\n    readme: mockerInfo.readme,\n    mockerListInfo: mockerListInfo,\n    localServerConfig: detailInfo.config,\n    hostname: detailInfo.hostname,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    loadMockerList() {\n      return dispatch(loadMockerList());\n    },\n\n    loadMocker(mockerName) {\n      return dispatch(loadMocker(mockerName));\n    },\n\n    loadMockerReadme(mockerName) {\n      return dispatch(loadMockerReadme(mockerName));\n    },\n\n    setMockerActiveModule(mockerName, mockModuleName) {\n      return dispatch(setMockerActiveModule(mockerName, mockModuleName));\n    },\n\n    setMockerDisable(mockerName, value) {\n      return dispatch(setMockerDisable(mockerName, value));\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Mocker);\n","import React from 'react';\nimport {Route} from 'react-router-dom';\n\nimport List from './components/list';\nimport Mocker from './components/mocker';\n\nimport './index.less';\n\nexport default function MockersContainer(props) {\n  let {match} = props;\n\n  return (\n    <div className=\"page-mockers\">\n      <Route path={`${match.url}/:mockerName`} component={Mocker} />\n      <Route exact path={match.url} component={List} />\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { Button, Form, Input } from 'antd';\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nconst debugJsonData = {\n  retcode: 0,\n  result: {\n    description: '我是 debug',\n  },\n};\n\nexport default class CreateMockerForm extends Component {\n  formRef = React.createRef();\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    if (\n      this.props.localServerConfig.mockServerPath !== nextProps.localServerConfig.mockServerPath\n    ) {\n      this.formRef.current.setFieldsValue({\n        parentPath: nextProps.localServerConfig.mockServerPath,\n      });\n    }\n  }\n\n  onFinish = values => {\n    console.log('Success:', values);\n    this.props.handleCreateMocker(values);\n  };\n\n  onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  render() {\n    const { localServerConfig } = this.props;\n\n    const initialValues = {\n      parentPath: localServerConfig.mockServerPath,\n      mockerName: 'i-am-xhr-request-get',\n      mockerMethod: 'GET',\n      mockerRoute: '/cgi-bin/i-am-xhr-request-get',\n      debugMockModuleJsonData: JSON.stringify(debugJsonData, null, 2),\n    };\n\n    return (\n      <Form\n        {...layout}\n        name=\"basic\"\n        ref={this.formRef}\n        initialValues={initialValues}\n        onFinish={this.onFinish}\n        onFinishFailed={this.onFinishFailed}>\n        <Form.Item\n          label=\"父级目录\"\n          name=\"parentPath\"\n          rules={[{ required: true, message: 'Please input your parentPath!' }]}>\n          <Input value={localServerConfig.mockServerPath} />\n        </Form.Item>\n\n        <Form.Item\n          label=\"mocker name\"\n          name=\"mockerName\"\n          rules={[{ required: true, message: 'Please input your mockerName!' }]}>\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label=\"mocker method\"\n          name=\"mockerMethod\"\n          rules={[{ required: true, message: 'Please input your mockerMethod!' }]}>\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label=\"mocker route\"\n          name=\"mockerRoute\"\n          rules={[{ required: true, message: 'Please input your mockerRoute!' }]}>\n          <Input />\n        </Form.Item>\n\n        <Form.Item label=\"桩数据\" name=\"debugMockModuleJsonData\">\n          <Input.TextArea autoSize />\n        </Form.Item>\n\n        <Form.Item {...tailLayout}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            提交\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Alert, Divider, Tag } from 'antd';\n\nimport CreateMockerForm from './create-mocker-form';\n\nimport { getDataByPost } from '../../../../business/db';\nimport { getCGIBase } from '../../../../custom';\n\nimport './index.less';\n\nclass CreateMocker extends Component {\n  state = {\n    logs: [],\n    message: '',\n    messageType: 'info',\n  };\n\n  getMockServerHost() {\n    const { localServerConfig } = this.props;\n\n    // hostname 应该与页面一致\n    const hostname = window.location.hostname;\n\n    // 如果是本地服务，则需要更换端口号为服务端返回的端口号。\n    // 例如本地调试的页面是 127.0.0.1:3000 而 mock server 是 127.0.0.1:9527\n    const port =\n      hostname === 'localhost' || hostname === '127.0.0.1'\n        ? localServerConfig.port\n        : window.location.port;\n\n    // 有端口的时候一定要记得设置端口\n    return hostname + (port ? `:${port}` : '');\n  }\n\n  handleCreateMocker = queryData => {\n    // 获得 requestURL\n    let requestURL = `${getCGIBase()}/create-mocker`;\n\n    if (process.env.NODE_ENV !== 'production') {\n      requestURL = 'http://127.0.0.1:9527' + requestURL;\n    }\n\n    this.addLog(`准备发送请求：${JSON.stringify(queryData)}`);\n\n    getDataByPost(requestURL, queryData)\n      .then(data => {\n        if (process.env.NODE_ENV !== 'production') {\n          console.log(`url=${requestURL}`, queryData, data);\n        }\n\n        if (data.retcode === 0) {\n          this.addLog(data, 'success');\n        } else {\n          this.addLog(data.result, 'error');\n        }\n      })\n      .catch(err => {\n        console.error(err);\n\n        this.addLog((err && err.message) || err, 'error');\n      });\n  };\n\n  addLog = (message, messageType = 'info') => {\n    this.setState({\n      logs: [\n        ...this.state.logs,\n        {\n          message: typeof message === 'object' ? JSON.stringify(message) : message,\n          messageType,\n        },\n      ],\n    });\n  };\n\n  render() {\n    const { localServerConfig } = this.props;\n    const { logs } = this.state;\n\n    return (\n      <div className=\"create-mocker\">\n        <h2>创建 mocker</h2>\n\n        <CreateMockerForm\n          localServerConfig={localServerConfig}\n          handleCreateMocker={this.handleCreateMocker}\n        />\n\n        {logs.map((item, index) => {\n          return (\n            <div key={index}>\n              <Tag>{index}</Tag>\n              <Alert message={item.message} type={item.messageType} />\n              <Divider />\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { detailInfo } = state;\n\n  return {\n    localServerConfig: detailInfo.config,\n  };\n}\n\nexport default connect(mapStateToProps)(CreateMocker);\n","import React, { Component } from 'react';\nimport { Button, Form, Input } from 'antd';\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nexport default class CreateMockerForm extends Component {\n\n  onFinish = values => {\n    console.log('Success:', values);\n    this.props.handleSearchMocker(values);\n  };\n\n  onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  render() {\n    const initialValues = {\n      route: '/cgi-bin/i-am-xhr-request-get',\n    };\n\n    return (\n      <Form\n        {...layout}\n        name=\"basic\"\n        initialValues={initialValues}\n        onFinish={this.onFinish}\n        onFinishFailed={this.onFinishFailed}>\n\n        <Form.Item\n          label=\"route\"\n          name=\"route\"\n          rules={[{ required: true, message: 'Please input your route!' }]}>\n          <Input />\n        </Form.Item>\n\n        <Form.Item {...tailLayout}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            提交\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Alert, Divider, Tag } from 'antd';\n\nimport SearchMockerForm from './search-mocker-form';\n\nimport { getDataByPost } from '../../../../business/db';\nimport { getCGIBase } from '../../../../custom';\n\nimport './index.less';\n\nclass CreateMocker extends Component {\n  state = {\n    logs: [],\n    message: '',\n    messageType: 'info',\n  };\n\n  getMockServerHost() {\n    const { localServerConfig } = this.props;\n\n    // hostname 应该与页面一致\n    const hostname = window.location.hostname;\n\n    // 如果是本地服务，则需要更换端口号为服务端返回的端口号。\n    // 例如本地调试的页面是 127.0.0.1:3000 而 mock server 是 127.0.0.1:9527\n    const port =\n      hostname === 'localhost' || hostname === '127.0.0.1'\n        ? localServerConfig.port\n        : window.location.port;\n\n    // 有端口的时候一定要记得设置端口\n    return hostname + (port ? `:${port}` : '');\n  }\n\n  handleSearchMocker = queryData => {\n    // 获得 requestURL\n    let requestURL = `${getCGIBase()}/search-mocker-list`;\n\n    if (process.env.NODE_ENV !== 'production') {\n      requestURL = 'http://127.0.0.1:9527' + requestURL;\n    }\n\n    this.addLog(`准备发送请求：${JSON.stringify(queryData)}`);\n\n    getDataByPost(requestURL, queryData)\n      .then(data => {\n        if (process.env.NODE_ENV !== 'production') {\n          console.log(`url=${requestURL}`, queryData, data);\n        }\n\n        if (data.retcode === 0) {\n          this.addLog(data, 'success');\n        } else {\n          this.addLog(data.result, 'error');\n        }\n      })\n      .catch(err => {\n        console.error(err);\n\n        this.addLog((err && err.message) || err, 'error');\n      });\n  };\n\n  addLog = (message, messageType = 'info') => {\n    this.setState({\n      logs: [\n        ...this.state.logs,\n        {\n          message: typeof message === 'object' ? JSON.stringify(message) : message,\n          messageType,\n        },\n      ],\n    });\n  };\n\n  render() {\n    const { localServerConfig } = this.props;\n    const { logs } = this.state;\n\n    return (\n      <div className=\"search-mocker\">\n        <h2>搜索 mocker</h2>\n\n        <SearchMockerForm\n          localServerConfig={localServerConfig}\n          handleSearchMocker={this.handleSearchMocker}\n        />\n\n        {logs.map((item, index) => {\n          return (\n            <div key={index}>\n              <Tag>{index}</Tag>\n              <Alert message={item.message} type={item.messageType} />\n              <Divider />\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { detailInfo } = state;\n\n  return {\n    localServerConfig: detailInfo.config,\n  };\n}\n\nexport default connect(mapStateToProps)(CreateMocker);\n","import React, { Component } from 'react';\n\nimport CreateMocker from './components/create-mocker';\nimport SearchMocker from './components/search-mocker';\n\nimport './index.less';\n\nexport default class Debug extends Component {\n  render() {\n    return (\n      <div className=\"page-debug text-content\">\n        <CreateMocker />\n        <SearchMocker />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\n\nimport { Layout } from 'antd';\n\nimport LayoutHeader from './components/layout-header';\n\nimport Home from './pages/home';\nimport Mockers from './pages/mockers';\nimport Debug from './pages/debug';\n\nimport { getSiteBase } from './custom';\nimport { loadDetail } from './datas/data-detail';\n\nimport './App.less';\n\nexport default class App extends Component {\n  componentDidMount() {\n    // 加载管理端的信息，包括配置等\n    this.props.dispatch(loadDetail());\n  }\n\n  render() {\n    return (\n      <Router>\n        <Layout className=\"mockstar-container\">\n          <LayoutHeader />\n\n          <Layout.Content>\n            <Switch>\n              <Redirect exact from=\"/\" to={`${getSiteBase()}/mockers`} />\n              <Redirect exact from={`${getSiteBase()}`} to={`${getSiteBase()}/mockers`} />\n              <Route path={`${getSiteBase()}/dashboard`} component={Home} />\n              <Route path={`${getSiteBase()}/mockers`} component={Mockers} />\n              <Route path={`${getSiteBase()}/debug`} component={Debug} />\n            </Switch>\n          </Layout.Content>\n        </Layout>\n      </Router>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {connect, Provider} from 'react-redux';\nimport createStore from './store';\n\nimport App from './App';\n\nconst store = createStore(window.__initialState);\n\nfunction mapStateToProps(state) {\n  return state;\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatch,\n  };\n}\n\nconst Root = connect(mapStateToProps, mapDispatchToProps)(App);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Root />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}